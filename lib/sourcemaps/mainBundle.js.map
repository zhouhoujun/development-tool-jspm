{"version":3,"sources":["mainBundle.js","mainBundle.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","development_core_1","require","htmlreplace","MainBundle","info","_classCallCheck","this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_inherits","_development_core_1$P","_createClass","value","ctx","option","gulp","cfgopt","src","index","pipes","dist","js","mainfile","bust","concat","_get","prototype","PipeTask","task","oper","Operation","release","deploy","exports"],"mappings":"AAAA,y0CACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GACvD,GAAuB,YAAnB,mBAAOP,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQQ,SAAyB,MAAOR,SAAQQ,SAASF,EAAGC,ICP1GE,mBAAAC,QAAuG,oBAE3FC,YAAWD,QAAM,qBAO7BE,WAAAA,SAAAA,GAEI,QAAAA,GAAYC,GAAgB,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAnB,OAAAoB,eAAAN,IAAAO,KAAAJ,KAClBF,IAHd,MAAAO,WAAAR,EAAAS,GAAAC,aAAAV,IAAArB,IAAA,SAAAgC,MAAA,SAMWC,EAAmBC,EAAqBC,GAC3C,GAAIC,GAAyBH,EAAIC,MACjC,OAAOC,GAAKE,IAAID,EAAOE,UAR/BtC,IAAA,QAAAgC,MAAA,QAAAO,GAWUN,EAAmBO,EAAmBL,GACxC,GAAII,IACA,SAACN,GACG,GAAIC,GAAyBD,EAAIC,MACjC,OAAOd,cAAcqB,GAAMP,EAAOQ,SAAW,SAAWR,EAAOS,QAIvE,OAAOJ,GAAMK,OAANC,KAAAxB,EAAAyB,UAAApB,WAAAnB,OAAAoB,eAAAN,EAAAyB,WAAA,QAAAtB,MAAAI,KAAAJ,KAAyBS,EAAKO,EAAML,QAnBnDd,GAAgCH,mBAAA6B,SAHhC1B,YAAAxB,YAACqB,mBAAA8B,MACGC,KAAM/B,mBAAAgC,UAAUC,QAAUjC,mBAAAgC,UAAUE,SAMnCtC,WAAA,qBAAAP,UDqBFc,YCzBUgC,QAAAhC,WAAUA","file":"../mainBundle.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst development_core_1 = require('development-core');\nconst htmlreplace = require('gulp-html-replace');\nlet MainBundle = class MainBundle extends development_core_1.PipeTask {\n    constructor(info) {\n        super(info);\n    }\n    source(ctx, option, gulp) {\n        let cfgopt = ctx.option;\n        return gulp.src(cfgopt.index);\n    }\n    pipes(ctx, dist, gulp) {\n        let pipes = [\n                (ctx) => {\n                let option = ctx.option;\n                return htmlreplace({ 'js': option.mainfile + '?bust=' + option.bust });\n            }\n        ];\n        return pipes.concat(super.pipes(ctx, dist, gulp));\n    }\n};\nMainBundle = __decorate([\n    development_core_1.task({\n        oper: development_core_1.Operation.release | development_core_1.Operation.deploy\n    }), \n    __metadata('design:paramtypes', [Object])\n], MainBundle);\nexports.MainBundle = MainBundle;\n","import * as _ from 'lodash';\r\nimport { task, ITaskContext, IAssertDist, Pipe, ITaskInfo, TransformSource, Operation, PipeTask } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as htmlreplace from 'gulp-html-replace';\r\n\r\nimport { IBundlesConfig } from './config';\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class MainBundle extends PipeTask {\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    source(ctx: ITaskContext, option: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let cfgopt = <IBundlesConfig>ctx.option;\r\n        return gulp.src(cfgopt.index)\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let pipes = <Pipe[]>[\r\n            (ctx: ITaskContext) => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                return htmlreplace({ 'js': option.mainfile + '?bust=' + option.bust });\r\n            }\r\n        ];\r\n\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n}\r\n"]}