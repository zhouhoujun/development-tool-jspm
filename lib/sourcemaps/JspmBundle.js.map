{"version":3,"sources":["JspmBundle.js","JspmBundle.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","path","fs_1","chalk","replace","jspm","source","vinylBuffer","chksum","mkdirp","JspmBundle","info","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","name","runWay","RunWay","sequence","manifestSplit","_inherits","_development_core_1$P","_createClass","value","config","option","ctx","setPackagePath","dirname","toStr","packageFile","jsbuilder","Builder","separateCSS","builder","Promise","resolve","then","jspmConfig","isArray","all","map","cf","loadConfig","undefined","trans","t","stream","bundle","_this2","opt","pr","to","bundles","bundleDeps","pkg","getPackage","console","log","red","process","exit","deps","keys","dependencies","depsExclude","exclude","isFunction","filter","indexOf","isBoolean","deplibs","combine","items","cores","each","n","b","concat","bundleConfig","dist","gulp","_this3","initBundles","getBundles","loadBuilder","bcfg","getBuildConfig","defaults","groupBundle","translate","groups","flatten","src","getSrc","getInfo","cyan","fileFilter","files","getRelativeSrc","mainfile","getBundleManifestPath","createBundler","join","_this4","toModule","baseURL","bundleBaseDir","s","filename","toUrl","toModulePath","fn","substring","extname","extend","dest","file","systemConfigTempl","relationToRoot","bust","bundlePaths","paths","bundleDest","getDist","rootpath","getFolders","f","p","env","root","includePackageFiles","jspmMates","*.css","loader","*.json","*.jsx","sfx","minify","mangle","sourceMaps","lowResSourceMaps","toRootPath","parent","toRootSrc","toSrc","jspmPackages","directories","packages","readdirSync","rootURL","context","_this5","bundleMaps","_get","prototype","calcChecksums","checksums","updateBundleManifest","manifest","writeBundleManifest","green","initOption","_this6","restps","isUndefined","resetAsserts","folders","isString","pth","toDistPath","existsSync","push","yellow","toDistSrc","ps","getRootPath","relp","fm","basename","reg","RegExp","reg2","pipes","getAssertResetPipe","output","_this7","bundlemap","modules","bundleName","_this8","gb","uniq","split","bundleGp","_this9","bundleStr","bundleItems","minusStr","exclusionString","getBundleDest","str","exclusionArray","_this10","minus","forEach","item","group","builderCfg","bundler","buildStatic","shortPath","getBundleShortPath","parse","base","bind","sync","write","nextTick","end","pipe","chksums","isObject","reject","filepath","err","sum","error","getBundleManifest","_this11","template","maps","css","json","test","first","jspmMetas","JSON","stringify","jspmMeta","includes","readFile","data","mainfilePipes","mainfileOutput","content","readFileSync","idx","writeFileSync","e","fullPath","min","PipeTask","task","oper","Operation","release","deploy","exports"],"mappings":"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","file":"../JspmBundle.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst path = require('path');\nconst fs_1 = require('fs');\nconst chalk = require('chalk');\nconst replace = require('gulp-replace');\n// const globby = require('globby');\nconst jspm = require('jspm');\nconst source = require('vinyl-source-stream');\nconst vinylBuffer = require('vinyl-buffer');\nconst chksum = require('checksum');\nconst mkdirp = require('mkdirp');\n// const uglify = require('gulp-uglify');\nlet JspmBundle = class JspmBundle extends development_core_1.PipeTask {\n    constructor(info) {\n        super(info);\n        this.name = 'jspm-bundle';\n        this.runWay = development_core_1.RunWay.sequence;\n        this.manifestSplit = `/*------bundles infos------*/`;\n    }\n    getOption(config) {\n        return config.option;\n    }\n    loadBuilder(ctx) {\n        let option = ctx.option;\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\n        return Promise.resolve(jsbuilder)\n            .then(builder => {\n            if (option.jspmConfig) {\n                if (_.isArray(option.jspmConfig)) {\n                    return Promise.all(option.jspmConfig.map(cf => builder.loadConfig(cf, undefined, true)))\n                        .then(() => {\n                        return builder;\n                    });\n                }\n                else {\n                    return builder.loadConfig(option.jspmConfig, undefined, true)\n                        .then(() => {\n                        return builder;\n                    });\n                }\n            }\n            else {\n                return builder;\n            }\n        });\n    }\n    translate(trans) {\n        if (_.isArray(trans)) {\n            return _.map(trans, t => {\n                t.stream['bundle'] = t.bundle;\n                return t.stream;\n            });\n        }\n        else {\n            trans.stream['bundle'] = trans.bundle;\n            return trans.stream;\n        }\n    }\n    initBundles(ctx) {\n        let opt = ctx.option;\n        let pr = Promise.resolve(null)\n            .then(() => ctx.to(opt.bundles));\n        if (opt.bundleDeps) {\n            pr = pr.then(bundles => {\n                let pkg = ctx.getPackage(opt.packageFile);\n                if (!pkg) {\n                    console.log(chalk.red('can not found package.json file.'));\n                    process.exit(0);\n                }\n                if (!pkg.jspm) {\n                    console.log(chalk.red('jspm not init in package.json file.'));\n                    process.exit(0);\n                }\n                let deps = _.keys(pkg.jspm.dependencies);\n                if (opt.depsExclude) {\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\n                }\n                return Promise.resolve()\n                    .then(() => {\n                    if (_.isFunction(opt.bundleDeps)) {\n                        // opt['_bundleDepsFunc'] = opt.bundleDeps;\n                        return opt.bundleDeps(ctx, deps);\n                    }\n                    else if (_.isBoolean(opt.bundleDeps)) {\n                        return {\n                            deplibs: {\n                                combine: true,\n                                items: deps\n                            }\n                        };\n                    }\n                    else {\n                        return opt.bundleDeps;\n                    }\n                })\n                    .then(bundleDeps => {\n                    let cores = _.keys(bundleDeps);\n                    _.each(_.keys(bundles), n => {\n                        let b = bundles[n];\n                        b.exclude = b.exclude || [];\n                        b.exclude = cores.concat(b.exclude);\n                        bundleDeps[n] = b;\n                    });\n                    return bundleDeps;\n                });\n            });\n        }\n        return pr.then(bundles => {\n            this.bundleConfig = bundles;\n            console.log('group bundles setting:\\n', bundles, '---------------------------------\\n');\n            return bundles;\n        });\n    }\n    source(ctx, dist, gulp) {\n        let option = ctx.option;\n        if (option.bundles) {\n            return this.initBundles(ctx)\n                .then(() => {\n                return Promise.all(_.map(this.getBundles(ctx), name => {\n                    return this.loadBuilder(ctx)\n                        .then(builder => {\n                        let bundle = this.bundleConfig[name];\n                        let bcfg = this.getBuildConfig(ctx);\n                        bundle.builder = _.defaults(bundle.builder, bcfg);\n                        if (bundle.builder.config) {\n                            builder.config(bundle.builder.config);\n                        }\n                        return this.groupBundle(ctx, builder, name, bundle, gulp)\n                            .then(trans => this.translate(trans));\n                    });\n                }));\n            }).then(groups => {\n                return _.flatten(groups);\n            });\n        }\n        else {\n            return this.loadBuilder(ctx)\n                .then(builder => {\n                let src = ctx.getSrc(this.getInfo());\n                console.log('start bundle all src : ', chalk.cyan(src));\n                let bcfg = this.getBuildConfig(ctx);\n                if (bcfg.config) {\n                    builder.config(bcfg.config);\n                }\n                return ctx.fileFilter(src)\n                    .then(files => {\n                    files = this.getRelativeSrc(ctx, files);\n                    console.log('bundle files:', chalk.cyan(files));\n                    let mainfile = this.getBundleManifestPath(ctx);\n                    return this.createBundler(ctx, builder, 'bundle', files.join(' + '), mainfile, bcfg)\n                        .then(trans => this.translate(trans));\n                });\n            });\n        }\n    }\n    getRelativeSrc(ctx, src, toModule = false) {\n        let baseURL = ctx.option.bundleBaseDir;\n        if (_.isArray(src)) {\n            return _.map(src, s => {\n                let filename = ctx.toUrl(baseURL, s);\n                return toModule ? this.toModulePath(filename) : filename;\n            });\n        }\n        else {\n            let fn = ctx.toUrl(baseURL, src);\n            return [(toModule ? this.toModulePath(fn) : fn)];\n        }\n    }\n    toModulePath(filename) {\n        if (!filename) {\n            return '';\n        }\n        return filename.substring(0, filename.length - path.extname(filename).length);\n    }\n    initOption(ctx) {\n        let option = _.extend({\n            baseURL: '',\n            bundleBaseDir: '.',\n            mainfile: 'bundle.js',\n            jspmConfig: '',\n            packageFile: 'package.json',\n            dest: '',\n            file: '',\n            systemConfigTempl: '',\n            relationToRoot: '',\n            bust: '',\n            bundles: null,\n            bundlePaths(ctx) {\n                let paths = {};\n                let bundleDest = ctx.getDist();\n                let rootpath = option.bundleBaseDir;\n                ctx.getFolders(rootpath, (f, d) => {\n                    if (f !== bundleDest) {\n                        let p = d + '/*';\n                        paths[p] = ctx.toUrl(ctx.env.root, path.join(rootpath, p));\n                    }\n                    return '';\n                });\n                // let jpk = <string>option.jspmPackages;\n                // let jp = path.basename(jpk) + '/*';\n                // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n                console.log('paths: ', paths);\n                return paths;\n            },\n            includePackageFiles: [\n                'system-polyfills.src.js',\n                'system.src.js'\n            ],\n            jspmMates: {\n                '*.css': {\n                    loader: 'css'\n                },\n                '*.json': {\n                    loader: 'json'\n                },\n                '*.jsx': {\n                    loader: 'jsx'\n                }\n            },\n            builder: {\n                sfx: false,\n                minify: false,\n                mangle: false,\n                sourceMaps: false,\n                separateCSS: false,\n                lowResSourceMaps: true\n            }\n        }, ctx.option);\n        ctx.option = option;\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\n        if (!option.bundleBaseDir && ctx.parent) {\n            option.bundleBaseDir = ctx.parent.getDist();\n        }\n        else if (option.bundleBaseDir) {\n            option.bundleBaseDir = ctx.toRootPath(ctx.toStr(option.bundleBaseDir));\n        }\n        else {\n            console.log(chalk.red('bundleBaseURL config error!'));\n            process.exit(0);\n        }\n        if (option.jspmConfig) {\n            option.jspmConfig = ctx.toRootSrc(ctx.toSrc(option.jspmConfig));\n        }\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\n        option.mainfile = ctx.toStr(option.mainfile);\n        let pkg = ctx.getPackage(option.packageFile);\n        if (!option.jspmPackages) {\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\n                option.jspmPackages = pkg.jspm.directories.packages;\n            }\n            else {\n                option.jspmPackages = 'jspm_packages';\n            }\n        }\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\n        if (!fs_1.readdirSync(option.jspmPackages)) {\n            console.log(chalk.red('jspm project config error!'));\n            process.exit(0);\n        }\n        return option;\n    }\n    getBuildConfig(ctx) {\n        let option = ctx.option;\n        if (!option.builder.config) {\n            option.builder.config = _.extend(option.builder.config || {}, {\n                paths: ctx.to(option.bundlePaths) || {},\n                rootURL: option.bundleBaseDir\n            });\n        }\n        return option.builder;\n    }\n    execute(context, gulp) {\n        this.bundleMaps = [];\n        let ctx = context;\n        return super.execute(ctx, gulp)\n            .then(() => {\n            let option = ctx.option;\n            if (option.bundles) {\n                return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\n                    return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\n                });\n            }\n            else {\n                return null;\n            }\n        }).then(manifest => {\n            if (manifest) {\n                return this.writeBundleManifest(ctx, manifest, gulp)\n                    .then(() => {\n                    console.log(chalk.green('------ Complete -------------'));\n                });\n            }\n            else {\n                console.log(chalk.green('------ Complete -------------'));\n                return null;\n            }\n        });\n    }\n    setup(ctx, gulp) {\n        ctx.option = this.initOption(ctx);\n        return super.setup(ctx, gulp);\n    }\n    getAssertResetPipe(ctx) {\n        if (!this.restps) {\n            let option = ctx.option;\n            if (_.isUndefined(option.resetAsserts)) {\n                option.resetAsserts = 'assets';\n            }\n            if (option.resetAsserts) {\n                let folders;\n                if (_.isString(option.resetAsserts)) {\n                    let pth = ctx.toDistPath(option.resetAsserts, this.getInfo());\n                    if (fs_1.existsSync(pth)) {\n                        folders = ctx.getFolders(pth);\n                        folders.push(pth);\n                    }\n                    else {\n                        console.log(chalk.yellow('rest css asserts folders:', pth, 'not exists.'));\n                    }\n                }\n                else {\n                    folders = ctx.toDistSrc(option.resetAsserts, this.getInfo());\n                }\n                folders = folders || [];\n                let ps = [];\n                let dist = ctx.getDist(this.getInfo());\n                let baseURL = option.baseURL; // ctx.toUrl(ctx.getRootPath(), <string>option.baseURL) || '.';\n                let root = ctx.getRootPath();\n                _.each(folders, f => {\n                    let relp = ctx.toUrl(root, path.join(baseURL, ctx.toUrl(dist, f)));\n                    let fm = path.basename(f);\n                    console.log('reset css url folder name:', chalk.cyan(fm), 'relate url:', chalk.cyan(relp));\n                    let reg = new RegExp(`(url\\\\((\\\\.\\\\.\\\\/)+${fm})|(url\\\\(\\\\/${fm})`, 'gi');\n                    ps.push(() => replace(reg, `url(${relp}`));\n                    let reg2 = new RegExp(`(url\\\\(\\\\\\\\\\'(\\\\.\\\\.\\\\/)+${fm})|(url\\\\(\\\\\\\\\\'\\\\/${fm})`, 'gi');\n                    ps.push(() => replace(reg2, `url(\\\\'${relp}`));\n                });\n                this.restps = ps;\n            }\n            else {\n                this.restps = [];\n            }\n        }\n        return this.restps;\n    }\n    pipes(ctx, dist, gulp) {\n        let pipes = super.pipes(ctx, dist, gulp) || [];\n        let ps = this.getAssertResetPipe(ctx);\n        if (ps && ps.length > 0) {\n            pipes = pipes.concat(ps);\n        }\n        return pipes;\n    }\n    working(source, ctx, option, gulp, pipes, output) {\n        let bundle = source['bundle'];\n        return super.working(source, ctx, option, gulp, pipes, output)\n            .then(() => {\n            let bundlemap = {\n                path: bundle.path,\n                modules: bundle.modules\n            };\n            this.bundleMaps.push(bundlemap);\n            if (bundle.sfx) {\n                console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            else {\n                console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            return;\n        });\n    }\n    getBundles(ctx) {\n        let groups = [];\n        if (ctx.env.gb) {\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\n        }\n        if (groups.length < 1) {\n            groups = _.keys(this.bundleConfig);\n        }\n        else {\n            groups = _.filter(groups, f => f && this.bundleConfig[f]);\n        }\n        console.log('cmmand group bundle:', chalk.cyan(groups));\n        return groups;\n    }\n    groupBundle(config, builder, name, bundleGp, gulp) {\n        let bundleStr = '';\n        let bundleDest = '';\n        let bundleItems = [];\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\n        if (bundleGp.items) {\n            bundleItems = _.isArray(bundleItems) ? bundleGp.items : _.keys(bundleGp.items);\n        }\n        if (bundleGp.combine) {\n            bundleDest = this.getBundleDest(config, name, bundleGp);\n            bundleStr = bundleItems.join(' + ') + minusStr;\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n        }\n        else {\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(bundleItems)}\\n-------------------------------`);\n            return Promise.all(bundleItems.map(key => {\n                bundleStr = key + minusStr;\n                bundleDest = this.getBundleDest(config, key, bundleGp);\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n            }));\n        }\n    }\n    exclusionString(exclude, groups) {\n        let str = this.exclusionArray(exclude, groups).join(' - ');\n        return (str) ? ' - ' + str : '';\n    }\n    exclusionArray(exclude, groups) {\n        let minus = [];\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\n        _.forEach(exclude, (item) => {\n            var group = groups[item];\n            if (group) {\n                // exclude everything from this group\n                minus = minus.concat(this.exclusionArray(group.items, groups));\n            }\n            else {\n                // exclude this item by name\n                minus.push(item);\n            }\n        });\n        return minus;\n    }\n    createBundler(config, builder, bundleName, bundleStr, bundleDest, builderCfg, bundleGp) {\n        let sfx = builderCfg.sfx;\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\n        let filename = path.parse(bundleDest).base;\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\n            .then(output => {\n            mkdirp.sync(path.dirname(bundleDest));\n            var stream = source(filename);\n            stream.write(output.source);\n            process.nextTick(function () {\n                stream.end();\n            });\n            console.log('pipe bundling：', chalk.cyan(bundleName));\n            return {\n                stream: stream.pipe(vinylBuffer()),\n                bundle: {\n                    path: shortPath,\n                    sfx: sfx,\n                    bundleName: bundleName,\n                    filename: filename,\n                    bundleDest: bundleDest,\n                    modules: output.modules\n                }\n            };\n        });\n    }\n    calcChecksums(option, bundles) {\n        let chksums = {};\n        console.log('Calculating checksums...');\n        return Promise.all(_.map(bundles, (bundle) => {\n            if (!_.isObject(bundle)) {\n                return null;\n            }\n            return new Promise((resolve, reject) => {\n                let filepath = path.join(option.bundleBaseDir || '.', bundle.path);\n                let filename = path.parse(bundle.path).base;\n                chksum.file(filepath, (err, sum) => {\n                    if (err) {\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\n                    }\n                    console.log(filename, chalk.cyan(sum));\n                    chksums[bundle.path] = sum;\n                    resolve(chksums);\n                });\n            });\n        })).then(() => {\n            return chksums;\n        });\n    }\n    updateBundleManifest(ctx, bundles, chksums) {\n        chksums = chksums || {};\n        var manifest = _.defaults(this.getBundleManifest(ctx), {\n            bundles: {},\n            chksums: {}\n        });\n        // console.log(manifest);\n        _.each(bundles, bundle => {\n            if (bundle.path) {\n                manifest.bundles[bundle.path] = bundle.modules;\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\n            }\n        });\n        return manifest;\n    }\n    writeBundleManifest(ctx, manifest, gulp) {\n        let option = ctx.option;\n        if (!option.mainfile) {\n            return Promise.reject('mainfile not configed.');\n        }\n        console.log('Writing manifest...');\n        let baseURL = ctx.toUrl(ctx.getRootPath(), option.baseURL) || '.';\n        console.log('system config baseURL: ', chalk.cyan(baseURL));\n        let bust = ctx.toStr(option.bust);\n        console.log('system bust: ', chalk.cyan(bust));\n        let output = `\r\nSystem.config({\r\n    baseURL: '${baseURL}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\n        let template = '';\n        if (manifest) {\n            // try {\n            template = ctx.toStr(option.systemConfigTempl);\n            if (!template) {\n                template = (bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\n            }\n            let maps = {\n                css: 'github:systemjs/plugin-css@0.1.20.js',\n                json: 'github:systemjs/plugin-json@0.1.2.js'\n            };\n            _.each(_.keys(manifest.bundles), n => {\n                if (/css.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n                if (/json.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n            });\n            let jspmMetas = option.jspmMates;\n            output += _.template(template)({\n                maps: JSON.stringify(maps, null, '    '),\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\n                paths: JSON.stringify(option.builder.config ? option.builder.config.paths : null, null, '    '),\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\n            });\n        }\n        let includes = option.includes || [];\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\n        return Promise.all(_.map(includes, f => {\n            return new Promise((resolve, reject) => {\n                fs_1.readFile(f, 'utf8', (err, data) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(data);\n                    }\n                });\n            });\n        }))\n            .then(data => {\n            data.push(output);\n            let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\n            console.log('mainfile:', mainfile);\n            mkdirp.sync(path.dirname(mainfile));\n            var stream = source(mainfile);\n            stream.write(data.join('\\n'));\n            process.nextTick(() => {\n                stream.end();\n            });\n            return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\n        });\n    }\n    getBundleManifestPath(ctx) {\n        return this.getBundleDest(ctx, ctx.option.mainfile);\n    }\n    getBundleManifest(ctx) {\n        let data = {};\n        let mainfile = this.getBundleManifestPath(ctx);\n        console.log('try to load old bundle in path ', mainfile);\n        if (fs_1.existsSync(mainfile)) {\n            try {\n                let content = fs_1.readFileSync(mainfile, 'utf8');\n                let idx = content.indexOf(this.manifestSplit);\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\n                content = content.substring(idx);\n                // console.log(content);\n                fs_1.writeFileSync(mainfile, content);\n                data = require(mainfile);\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n            }\n            catch (e) {\n                console.log(chalk.red(e));\n            }\n        }\n        else {\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n        }\n        return data;\n    }\n    getBundleShortPath(ctx, bundleName, bundleGp) {\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\n            : path.join(ctx.getDist(), bundleName);\n        return ctx.toUrl(ctx.option.bundleBaseDir, fullPath);\n    }\n    getBundleDest(ctx, bundleName, bundleGp) {\n        let dest = ctx.getDist();\n        if (bundleGp) {\n            let min = bundleGp.builder.minify;\n            let name = bundleGp.items[bundleName] || bundleName;\n            let file = name + ((min) ? '.min.js' : '.js');\n            if (bundleGp.combine) {\n                dest = path.join(dest, file);\n            }\n            else {\n                dest = path.join(dest, bundleName, file);\n            }\n        }\n        else {\n            dest = path.join(dest, bundleName);\n        }\n        return dest;\n    }\n};\nJspmBundle = __decorate([\n    development_core_1.task({\n        oper: development_core_1.Operation.release | development_core_1.Operation.deploy\n    }), \n    __metadata('design:paramtypes', [Object])\n], JspmBundle);\nexports.JspmBundle = JspmBundle;\n","import * as _ from 'lodash';\r\nimport { IMap, task, RunWay, IAssertDist, ITaskContext, Src, Pipe, OutputPipe, ITaskInfo, TransformSource, ITransform, Operation, PipeTask, bindingConfig } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IBundlesConfig, IBundleGroup, IBuidlerConfig, IBundleMap, IBundleTransform } from './config';\r\n\r\nimport { readFileSync, readFile, existsSync, writeFileSync, readdirSync } from 'fs';\r\nimport * as chalk from 'chalk';\r\n\r\nconst replace = require('gulp-replace');\r\n// const globby = require('globby');\r\nconst jspm = require('jspm');\r\nconst source = require('vinyl-source-stream');\r\nconst vinylBuffer = require('vinyl-buffer');\r\nconst chksum = require('checksum');\r\nconst mkdirp = require('mkdirp');\r\n// const uglify = require('gulp-uglify');\r\n\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class JspmBundle extends PipeTask {\r\n\r\n    name = 'jspm-bundle';\r\n    runWay = RunWay.sequence;\r\n    private bundleMaps: IBundleMap[];\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    protected getOption(config: ITaskContext): IAssertDist {\r\n        return config.option;\r\n    }\r\n\r\n    protected loadBuilder(ctx: ITaskContext): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\r\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\r\n\r\n        return Promise.resolve(jsbuilder)\r\n            .then(builder => {\r\n                if (option.jspmConfig) {\r\n                    if (_.isArray(option.jspmConfig)) {\r\n                        return Promise.all(option.jspmConfig.map(cf => builder.loadConfig(cf, undefined, true)))\r\n                            .then(() => {\r\n                                return builder;\r\n                            });\r\n                    } else {\r\n                        return builder.loadConfig(option.jspmConfig, undefined, true)\r\n                            .then(() => {\r\n                                return builder;\r\n                            });\r\n                    }\r\n                } else {\r\n                    return builder;\r\n                }\r\n            });\r\n    }\r\n\r\n    private translate(trans: IBundleTransform | IBundleTransform[]): ITransform | ITransform[] {\r\n        if (_.isArray(trans)) {\r\n            return _.map(trans, t => {\r\n                t.stream['bundle'] = t.bundle;\r\n                return t.stream;\r\n            });\r\n        } else {\r\n            trans.stream['bundle'] = trans.bundle;\r\n            return trans.stream;\r\n        }\r\n    }\r\n\r\n    private bundleConfig: IMap<IBundleGroup>;\r\n    initBundles(ctx: ITaskContext): Promise<IMap<IBundleGroup>> {\r\n        let opt = <IBundlesConfig>ctx.option;\r\n        let pr = Promise.resolve<IMap<IBundleGroup>>(null)\r\n            .then(() => ctx.to<IMap<IBundleGroup> | Promise<IMap<IBundleGroup>>>(opt.bundles));\r\n\r\n        if (opt.bundleDeps) {\r\n            pr = pr.then(bundles => {\r\n                let pkg = ctx.getPackage(<string>opt.packageFile);\r\n                if (!pkg) {\r\n                    console.log(chalk.red('can not found package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                if (!pkg.jspm) {\r\n                    console.log(chalk.red('jspm not init in package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                let deps = _.keys(pkg.jspm.dependencies);\r\n                if (opt.depsExclude) {\r\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\r\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\r\n                }\r\n\r\n                return Promise.resolve()\r\n                    .then(() => {\r\n                        if (_.isFunction(opt.bundleDeps)) {\r\n                            // opt['_bundleDepsFunc'] = opt.bundleDeps;\r\n                            return opt.bundleDeps(ctx, deps);\r\n                        } else if (_.isBoolean(opt.bundleDeps)) {\r\n                            return {\r\n                                deplibs: {\r\n                                    combine: true,\r\n                                    items: deps\r\n                                }\r\n                            };\r\n                        } else {\r\n                            return opt.bundleDeps;\r\n                        }\r\n                    })\r\n                    .then(bundleDeps => {\r\n\r\n                        let cores = _.keys(bundleDeps);\r\n                        _.each(_.keys(bundles), n => {\r\n                            let b: IBundleGroup = bundles[n];\r\n                            b.exclude = b.exclude || [];\r\n                            b.exclude = cores.concat(b.exclude);\r\n                            bundleDeps[n] = b;\r\n                        });\r\n\r\n                        return bundleDeps;\r\n                    });\r\n            });\r\n        }\r\n\r\n        return pr.then(bundles => {\r\n            this.bundleConfig = bundles;\r\n            console.log('group bundles setting:\\n', bundles, '---------------------------------\\n');\r\n            return bundles;\r\n        });\r\n\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (option.bundles) {\r\n            return this.initBundles(<ITaskContext>ctx)\r\n                .then(() => {\r\n                    return Promise.all(_.map(this.getBundles(ctx), name => {\r\n                        return this.loadBuilder(ctx)\r\n                            .then(builder => {\r\n                                let bundle: IBundleGroup = this.bundleConfig[name];\r\n                                let bcfg = this.getBuildConfig(ctx);\r\n                                bundle.builder = <IBuidlerConfig>_.defaults(bundle.builder, bcfg);\r\n                                if (bundle.builder.config) {\r\n                                    builder.config(bundle.builder.config);\r\n                                }\r\n                                return this.groupBundle(<ITaskContext>ctx, builder, name, bundle, gulp)\r\n                                    .then(trans => this.translate(trans));\r\n                            });\r\n                    }))\r\n                }).then(groups => {\r\n                    return _.flatten(groups);\r\n                });\r\n        } else {\r\n            return this.loadBuilder(ctx)\r\n                .then(builder => {\r\n                    let src = ctx.getSrc(this.getInfo());\r\n                    console.log('start bundle all src : ', chalk.cyan(<any>src));\r\n                    let bcfg = this.getBuildConfig(ctx);\r\n                    if (bcfg.config) {\r\n                        builder.config(bcfg.config)\r\n                    }\r\n\r\n                    return ctx.fileFilter(src)\r\n                        .then(files => {\r\n                            files = this.getRelativeSrc(ctx, files);\r\n                            console.log('bundle files:', chalk.cyan(<any>files));\r\n                            let mainfile = this.getBundleManifestPath(<ITaskContext>ctx);\r\n                            return this.createBundler(<ITaskContext>ctx, builder, 'bundle', files.join(' + '), mainfile, bcfg)\r\n                                .then(trans => this.translate(trans));\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    private getRelativeSrc(ctx: ITaskContext, src: Src, toModule = false): string[] {\r\n        let baseURL = <string>(<IBundlesConfig>ctx.option).bundleBaseDir;\r\n        if (_.isArray(src)) {\r\n            return _.map(src, s => {\r\n                let filename = ctx.toUrl(baseURL, s);\r\n                return toModule ? this.toModulePath(filename) : filename;\r\n            });\r\n        } else {\r\n            let fn = ctx.toUrl(baseURL, src);\r\n            return [(toModule ? this.toModulePath(fn) : fn)];\r\n        }\r\n    }\r\n\r\n    private toModulePath(filename: string): string {\r\n        if (!filename) {\r\n            return '';\r\n        }\r\n        return filename.substring(0, filename.length - path.extname(filename).length);\r\n    }\r\n\r\n    private initOption(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>_.extend(<IBundlesConfig>{\r\n            baseURL: '',\r\n            bundleBaseDir: '.',\r\n            mainfile: 'bundle.js',\r\n            jspmConfig: '',\r\n            packageFile: 'package.json',\r\n            dest: '',\r\n            file: '',\r\n            systemConfigTempl: '',\r\n            relationToRoot: '',\r\n            bust: '',\r\n            bundles: null,\r\n            bundlePaths(ctx) {\r\n                let paths: any = {};\r\n                let bundleDest = ctx.getDist();\r\n                let rootpath = <string>option.bundleBaseDir;\r\n                ctx.getFolders(rootpath, (f, d) => {\r\n                    if (f !== bundleDest) {\r\n                        let p = d + '/*';\r\n                        paths[p] = ctx.toUrl(ctx.env.root, path.join(rootpath, p));\r\n                    }\r\n                    return '';\r\n                });\r\n                // let jpk = <string>option.jspmPackages;\r\n                // let jp = path.basename(jpk) + '/*';\r\n                // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n                console.log('paths: ', paths);\r\n                return paths;\r\n            },\r\n            includePackageFiles: [\r\n                'system-polyfills.src.js',\r\n                'system.src.js'\r\n            ],\r\n            jspmMates: {\r\n                '*.css': {\r\n                    loader: 'css'\r\n                },\r\n                '*.json': {\r\n                    loader: 'json'\r\n                },\r\n                '*.jsx': {\r\n                    loader: 'jsx'\r\n                }\r\n            },\r\n            builder: {\r\n                sfx: false,\r\n                minify: false,\r\n                mangle: false,\r\n                sourceMaps: false,\r\n                separateCSS: false,\r\n                lowResSourceMaps: true\r\n            }\r\n        }, <IBundlesConfig>ctx.option);\r\n\r\n        ctx.option = option;\r\n\r\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\r\n        if (!option.bundleBaseDir && ctx.parent) {\r\n            option.bundleBaseDir = ctx.parent.getDist()\r\n        } else if (option.bundleBaseDir) {\r\n            option.bundleBaseDir = ctx.toRootPath(ctx.toStr(option.bundleBaseDir));\r\n        } else {\r\n            console.log(chalk.red('bundleBaseURL config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        if (option.jspmConfig) {\r\n            option.jspmConfig = ctx.toRootSrc(ctx.toSrc(option.jspmConfig));\r\n        }\r\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\r\n        option.mainfile = ctx.toStr(option.mainfile);\r\n        let pkg = ctx.getPackage(<string>option.packageFile);\r\n        if (!option.jspmPackages) {\r\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\r\n                option.jspmPackages = <string>pkg.jspm.directories.packages;\r\n            } else {\r\n                option.jspmPackages = 'jspm_packages';\r\n            }\r\n        }\r\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\r\n\r\n        if (!readdirSync(option.jspmPackages)) {\r\n            console.log(chalk.red('jspm project config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        return option;\r\n    }\r\n\r\n    getBuildConfig(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.builder.config) {\r\n            option.builder.config = _.extend(option.builder.config || {}, {\r\n                paths: ctx.to<IMap<string>>(option.bundlePaths) || {},\r\n                rootURL: <string>option.bundleBaseDir\r\n            });\r\n        }\r\n\r\n        return option.builder;\r\n    }\r\n\r\n    execute(context: ITaskContext, gulp: Gulp) {\r\n        this.bundleMaps = [];\r\n        let ctx = <ITaskContext>context;\r\n        return super.execute(ctx, gulp)\r\n            .then(() => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                if (option.bundles) {\r\n                    return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\r\n                        return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\r\n                    });\r\n                } else {\r\n                    return null;\r\n                }\r\n            }).then(manifest => {\r\n                if (manifest) {\r\n                    return this.writeBundleManifest(ctx, manifest, gulp)\r\n                        .then(() => {\r\n                            console.log(chalk.green('------ Complete -------------'));\r\n                        });\r\n                } else {\r\n                    console.log(chalk.green('------ Complete -------------'));\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        ctx.option = this.initOption(ctx);\r\n        return super.setup(ctx, gulp);\r\n    }\r\n\r\n    private restps: Pipe[];\r\n    getAssertResetPipe(ctx: ITaskContext) {\r\n        if (!this.restps) {\r\n            let option = <IBundlesConfig>ctx.option;\r\n            if (_.isUndefined(option.resetAsserts)) {\r\n                option.resetAsserts = 'assets';\r\n            }\r\n            if (option.resetAsserts) {\r\n                let folders: string[];\r\n                if (_.isString(option.resetAsserts)) {\r\n                    let pth = ctx.toDistPath(option.resetAsserts, this.getInfo());\r\n                    if (existsSync(pth)) {\r\n                        folders = ctx.getFolders(pth);\r\n                        folders.push(pth);\r\n                    } else {\r\n                        console.log(chalk.yellow('rest css asserts folders:', pth, 'not exists.'))\r\n                    }\r\n                } else {\r\n                    folders = <string[]>ctx.toDistSrc(option.resetAsserts, this.getInfo());\r\n                }\r\n\r\n                folders = folders || [];\r\n\r\n                let ps = [];\r\n                let dist = ctx.getDist(this.getInfo());\r\n                let baseURL = <string>option.baseURL; // ctx.toUrl(ctx.getRootPath(), <string>option.baseURL) || '.';\r\n                let root = ctx.getRootPath();\r\n                _.each(folders, f => {\r\n                    let relp = ctx.toUrl(root, path.join(baseURL, ctx.toUrl(dist, f)));\r\n                    let fm = path.basename(f);\r\n                    console.log('reset css url folder name:', chalk.cyan(fm), 'relate url:', chalk.cyan(relp));\r\n                    let reg = new RegExp(`(url\\\\((\\\\.\\\\.\\\\/)+${fm})|(url\\\\(\\\\/${fm})`, 'gi');\r\n                    ps.push(() => replace(reg, `url(${relp}`));\r\n                    let reg2 = new RegExp(`(url\\\\(\\\\\\\\\\'(\\\\.\\\\.\\\\/)+${fm})|(url\\\\(\\\\\\\\\\'\\\\/${fm})`, 'gi');\r\n                    ps.push(() => replace(reg2, `url(\\\\'${relp}`));\r\n                });\r\n                this.restps = ps;\r\n            } else {\r\n                this.restps = [];\r\n            }\r\n        }\r\n        return this.restps;\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let pipes = super.pipes(ctx, dist, gulp) || [];\r\n        let ps = this.getAssertResetPipe(ctx);\r\n        if (ps && ps.length > 0) {\r\n            pipes = pipes.concat(ps);\r\n        }\r\n        return pipes;\r\n    }\r\n\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        let bundle = <IBundleMap>source['bundle'];\r\n        return super.working(source, ctx, option, gulp, pipes, output)\r\n            .then(() => {\r\n                let bundlemap: IBundleMap = {\r\n                    path: bundle.path,\r\n                    modules: bundle.modules\r\n                };\r\n                this.bundleMaps.push(bundlemap);\r\n                if (bundle.sfx) {\r\n                    console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                } else {\r\n                    console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                }\r\n                return;\r\n            });\r\n    }\r\n\r\n    getBundles(ctx: ITaskContext) {\r\n\r\n        let groups = [];\r\n        if (ctx.env.gb) {\r\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\r\n        }\r\n\r\n        if (groups.length < 1) {\r\n            groups = _.keys(this.bundleConfig);\r\n        } else {\r\n            groups = _.filter(groups, f => f && this.bundleConfig[f]);\r\n        }\r\n        console.log('cmmand group bundle:', chalk.cyan(<any>groups));\r\n        return groups;\r\n    }\r\n\r\n    protected groupBundle(config: ITaskContext, builder, name: string, bundleGp: IBundleGroup, gulp: Gulp): Promise<IBundleTransform | IBundleTransform[]> {\r\n\r\n        let bundleStr = '';\r\n        let bundleDest = '';\r\n\r\n        let bundleItems: string[] = [];\r\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\r\n\r\n        if (bundleGp.items) {\r\n            bundleItems = _.isArray(bundleItems) ? <string[]>bundleGp.items : _.keys(bundleGp.items);\r\n        }\r\n\r\n        if (bundleGp.combine) {\r\n            bundleDest = this.getBundleDest(config, name, bundleGp);\r\n            bundleStr = bundleItems.join(' + ') + minusStr;\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\r\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n\r\n        } else {\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(<any>bundleItems)}\\n-------------------------------`);\r\n            return Promise.all(bundleItems.map(key => {\r\n                bundleStr = key + minusStr;\r\n                bundleDest = this.getBundleDest(config, key, bundleGp);\r\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n            }));\r\n        }\r\n    }\r\n\r\n    private exclusionString(exclude, groups): string {\r\n        let str = this.exclusionArray(exclude, groups).join(' - ');\r\n        return (str) ? ' - ' + str : '';\r\n    }\r\n\r\n    private exclusionArray(exclude, groups): string[] {\r\n        let minus: string[] = [];\r\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\r\n        _.forEach(exclude, (item: string) => {\r\n            var group = groups[item];\r\n            if (group) {\r\n                // exclude everything from this group\r\n                minus = minus.concat(this.exclusionArray(group.items, groups));\r\n            } else {\r\n                // exclude this item by name\r\n                minus.push(item);\r\n            }\r\n        });\r\n        return minus;\r\n    }\r\n\r\n    private createBundler(config: ITaskContext, builder: any, bundleName: string, bundleStr: string, bundleDest: string, builderCfg: IBuidlerConfig, bundleGp?: IBundleGroup): Promise<IBundleTransform> {\r\n\r\n        let sfx = builderCfg.sfx;\r\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\r\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\r\n        let filename = path.parse(bundleDest).base;\r\n\r\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\r\n            .then(output => {\r\n                mkdirp.sync(path.dirname(bundleDest));\r\n                var stream: ITransform = source(filename);\r\n                stream.write(output.source);\r\n                process.nextTick(function () {\r\n                    stream.end();\r\n                });\r\n\r\n                console.log('pipe bundling：', chalk.cyan(bundleName));\r\n                return {\r\n                    stream: stream.pipe(vinylBuffer()),\r\n                    bundle: {\r\n                        path: shortPath,\r\n                        sfx: sfx,\r\n                        bundleName: bundleName,\r\n                        filename: filename,\r\n                        bundleDest: bundleDest,\r\n                        modules: output.modules\r\n                    }\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    private calcChecksums(option: IBundlesConfig, bundles: any[]): Promise<any> {\r\n        let chksums = {};\r\n\r\n        console.log('Calculating checksums...');\r\n\r\n        return Promise.all(_.map(bundles, (bundle: any) => {\r\n            if (!_.isObject(bundle)) {\r\n                return null;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let filepath = path.join(<string>option.bundleBaseDir || '.', bundle.path);\r\n                let filename = path.parse(bundle.path).base;\r\n                chksum.file(filepath, (err, sum) => {\r\n                    if (err) {\r\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\r\n                    }\r\n                    console.log(filename, chalk.cyan(sum));\r\n                    chksums[bundle.path] = sum;\r\n                    resolve(chksums);\r\n                });\r\n            });\r\n\r\n        })).then(() => {\r\n            return chksums;\r\n        });\r\n    }\r\n\r\n    protected updateBundleManifest(ctx: ITaskContext, bundles: any[], chksums?: any) {\r\n\r\n        chksums = chksums || {};\r\n\r\n        var manifest: any = _.defaults(this.getBundleManifest(ctx), {\r\n            bundles: {},\r\n            chksums: {}\r\n        });\r\n\r\n        // console.log(manifest);\r\n\r\n        _.each(bundles, bundle => {\r\n            if (bundle.path) {\r\n                manifest.bundles[bundle.path] = bundle.modules;\r\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\r\n            }\r\n        });\r\n\r\n        return manifest;\r\n\r\n    }\r\n\r\n    private manifestSplit = `/*------bundles infos------*/`;\r\n    private writeBundleManifest(ctx: ITaskContext, manifest, gulp: Gulp): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.mainfile) {\r\n            return Promise.reject('mainfile not configed.');\r\n        }\r\n\r\n\r\n        console.log('Writing manifest...');\r\n\r\n        let baseURL = ctx.toUrl(ctx.getRootPath(), <string>option.baseURL) || '.';\r\n        console.log('system config baseURL: ', chalk.cyan(baseURL));\r\n\r\n        let bust = ctx.toStr(option.bust);\r\n        console.log('system bust: ', chalk.cyan(bust));\r\n\r\n        let output = `\r\nSystem.config({\r\n    baseURL: '${baseURL}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\r\n        let template = '';\r\n\r\n        if (manifest) {\r\n            // try {\r\n            template = ctx.toStr(option.systemConfigTempl);\r\n\r\n            if (!template) {\r\n                template = (bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\r\n            }\r\n\r\n\r\n            let maps = {\r\n                css: 'github:systemjs/plugin-css@0.1.20.js',\r\n                json: 'github:systemjs/plugin-json@0.1.2.js'\r\n            };\r\n\r\n            _.each(_.keys(manifest.bundles), n => {\r\n                if (/css.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n                if (/json.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n            });\r\n\r\n            let jspmMetas = option.jspmMates;\r\n            output += _.template(template)({\r\n                maps: JSON.stringify(maps, null, '    '),\r\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\r\n                paths: JSON.stringify(option.builder.config ? option.builder.config.paths : null, null, '    '),\r\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\r\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let includes = option.includes || [];\r\n\r\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\r\n\r\n        return Promise.all(_.map(includes, f => {\r\n            return new Promise<string>((resolve, reject) => {\r\n                readFile(f, 'utf8', (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            });\r\n        }))\r\n            .then(data => {\r\n                data.push(output);\r\n                let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\r\n                console.log('mainfile:', mainfile);\r\n                mkdirp.sync(path.dirname(mainfile));\r\n                var stream = <NodeJS.ReadWriteStream>source(mainfile);\r\n                stream.write(data.join('\\n'));\r\n                process.nextTick(() => {\r\n                    stream.end();\r\n                });\r\n\r\n                return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\r\n            });\r\n\r\n    }\r\n\r\n    private getBundleManifestPath(ctx: ITaskContext): string {\r\n        return this.getBundleDest(ctx, <string>(<IBundlesConfig>ctx.option).mainfile);\r\n    }\r\n    private getBundleManifest(ctx: ITaskContext): any {\r\n        let data: any = {};\r\n        let mainfile: string = this.getBundleManifestPath(ctx);\r\n        console.log('try to load old bundle in path ', mainfile);\r\n        if (existsSync(mainfile)) {\r\n            try {\r\n                let content = readFileSync(mainfile, 'utf8');\r\n                let idx = content.indexOf(this.manifestSplit);\r\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\r\n                content = content.substring(idx);\r\n                // console.log(content);\r\n                writeFileSync(mainfile, content);\r\n                data = require(mainfile);\r\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n            } catch (e) {\r\n                console.log(chalk.red(e));\r\n            }\r\n        } else {\r\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private getBundleShortPath(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\r\n            : path.join(ctx.getDist(), bundleName);\r\n\r\n        return ctx.toUrl(<string>(<IBundlesConfig>ctx.option).bundleBaseDir, fullPath)\r\n\r\n    }\r\n\r\n    private getBundleDest(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n\r\n        let dest = ctx.getDist();\r\n        if (bundleGp) {\r\n            let min = bundleGp.builder.minify;\r\n            let name = bundleGp.items[bundleName] || bundleName;\r\n            let file = name + ((min) ? '.min.js' : '.js');\r\n\r\n            if (bundleGp.combine) {\r\n                dest = path.join(dest, file);\r\n            } else {\r\n                dest = path.join(dest, bundleName, file);\r\n            }\r\n        } else {\r\n            dest = path.join(dest, bundleName);\r\n        }\r\n\r\n        return dest;\r\n    }\r\n}\r\n"]}