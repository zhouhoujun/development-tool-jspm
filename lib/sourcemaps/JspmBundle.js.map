{"version":3,"sources":["JspmBundle.js","JspmBundle.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","path","fs_1","chalk","jspm","source","vinylBuffer","chksum","mkdirp","JspmBundle","info","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","name","runWay","RunWay","sequence","manifestSplit","_inherits","_development_core_1$P","_createClass","value","config","option","ctx","setPackagePath","dirname","toStr","packageFile","jsbuilder","Builder","separateCSS","builder","Promise","resolve","then","jspmConfig","loadConfig","undefined","trans","isArray","map","t","stream","bundle","_this2","opt","pr","isFunction","bundles","bundleDeps","pkg","getPackage","console","log","red","process","exit","deps","keys","dependencies","depsExclude","exclude","filter","indexOf","isBoolean","deplibs","combine","items","cores","each","n","b","concat","bundleConfig","dist","gulp","_this3","initBundles","all","getBundles","loadBuilder","bcfg","getBuildConfig","defaults","groupBundle","translate","groups","flatten","src","getSrc","getInfo","cyan","fileFilter","files","getRelativeSrc","mainfile","getBundleManifestPath","createBundler","join","pathstr","relativePath","relative","replace","_this4","toModule","baseURL","bundleBaseDir","s","filename","toUrl","toModulePath","fn","substring","extname","self","extend","dest","file","systemConfigTempl","relationToRoot","bust","bundlePaths","paths","bundleDest","getDist","rootpath","dir","readdirSync","sf","f","lstatSync","isDirectory","p","env","root","includePackageFiles","jspmMates","*.css","loader","*.json","*.jsx","sfx","minify","mangle","sourceMaps","lowResSourceMaps","toRootPath","parent","jspmPackages","directories","packages","rootURL","context","_this5","bundleMaps","_get","prototype","calcChecksums","checksums","updateBundleManifest","manifest","writeBundleManifest","green","initOption","pipes","output","_this6","bundlemap","modules","push","bundleName","gb","uniq","split","bundleGp","_this7","bundleStr","bundleItems","minusStr","exclusionString","getBundleDest","str","exclusionArray","_this8","minus","forEach","item","group","builderCfg","bundler","buildStatic","shortPath","getBundleShortPath","parse","base","bind","sync","write","nextTick","end","pipe","chksums","isObject","reject","filepath","err","sum","error","getBundleManifest","_this9","template","maps","css","json","test","first","jspmMetas","JSON","stringify","jspmMeta","includes","readFile","data","mainfilePipes","mainfileOutput","existsSync","content","readFileSync","idx","writeFileSync","e","fullPath","min","PipeTask","task","oper","Operation","release","deploy","exports"],"mappings":"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","file":"../JspmBundle.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst path = require('path');\nconst fs_1 = require('fs');\nconst chalk = require('chalk');\n// const globby = require('globby');\nconst jspm = require('jspm');\nconst source = require('vinyl-source-stream');\nconst vinylBuffer = require('vinyl-buffer');\nconst chksum = require('checksum');\nconst mkdirp = require('mkdirp');\n// const uglify = require('gulp-uglify');\nlet JspmBundle = class JspmBundle extends development_core_1.PipeTask {\n    constructor(info) {\n        super(info);\n        this.name = 'jspm-bundle';\n        this.runWay = development_core_1.RunWay.sequence;\n        this.manifestSplit = `/*------bundles infos------*/`;\n    }\n    getOption(config) {\n        return config.option;\n    }\n    loadBuilder(ctx) {\n        let option = ctx.option;\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\n        return Promise.resolve(jsbuilder)\n            .then(builder => {\n            if (option.jspmConfig) {\n                return builder.loadConfig(option.jspmConfig, undefined, true)\n                    .then(() => {\n                    return builder;\n                });\n            }\n            else {\n                return builder;\n            }\n        });\n    }\n    translate(trans) {\n        if (_.isArray(trans)) {\n            return _.map(trans, t => {\n                t.stream['bundle'] = t.bundle;\n                return t.stream;\n            });\n        }\n        else {\n            trans.stream['bundle'] = trans.bundle;\n            return trans.stream;\n        }\n    }\n    initBundles(ctx) {\n        let opt = ctx.option;\n        let pr = Promise.resolve(null)\n            .then(() => {\n            if (_.isFunction(opt.bundles)) {\n                // opt['_bundlesFunc'] = opt.bundles;\n                return opt.bundles(ctx);\n            }\n            else {\n                return opt.bundles;\n            }\n        });\n        if (opt.bundleDeps) {\n            pr = pr.then(bundles => {\n                let pkg = ctx.getPackage(opt.packageFile);\n                if (!pkg) {\n                    console.log(chalk.red('can not found package.json file.'));\n                    process.exit(0);\n                }\n                if (!pkg.jspm) {\n                    console.log(chalk.red('jspm not init in package.json file.'));\n                    process.exit(0);\n                }\n                let deps = _.keys(pkg.jspm.dependencies);\n                if (opt.depsExclude) {\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\n                }\n                return Promise.resolve()\n                    .then(() => {\n                    if (_.isFunction(opt.bundleDeps)) {\n                        // opt['_bundleDepsFunc'] = opt.bundleDeps;\n                        return opt.bundleDeps(ctx, deps);\n                    }\n                    else if (_.isBoolean(opt.bundleDeps)) {\n                        return {\n                            deplibs: {\n                                combine: true,\n                                items: deps\n                            }\n                        };\n                    }\n                    else {\n                        return opt.bundleDeps;\n                    }\n                })\n                    .then(bundleDeps => {\n                    let cores = _.keys(bundleDeps);\n                    _.each(_.keys(bundles), n => {\n                        let b = bundles[n];\n                        b.exclude = b.exclude || [];\n                        b.exclude = cores.concat(b.exclude);\n                        bundleDeps[n] = b;\n                    });\n                    return bundleDeps;\n                });\n            });\n        }\n        return pr.then(bundles => {\n            this.bundleConfig = bundles;\n            console.log('group bundles setting:\\n', bundles, '---------------------------------\\n');\n            return bundles;\n        });\n    }\n    source(ctx, dist, gulp) {\n        let option = ctx.option;\n        if (option.bundles) {\n            return this.initBundles(ctx)\n                .then(() => {\n                return Promise.all(_.map(this.getBundles(ctx), name => {\n                    return this.loadBuilder(ctx)\n                        .then(builder => {\n                        let bundle = this.bundleConfig[name];\n                        let bcfg = this.getBuildConfig(ctx);\n                        bundle.builder = _.defaults(bundle.builder, bcfg);\n                        if (bundle.builder.config) {\n                            builder.config(bundle.builder.config);\n                        }\n                        return this.groupBundle(ctx, builder, name, bundle, gulp)\n                            .then(trans => this.translate(trans));\n                    });\n                }));\n            }).then(groups => {\n                return _.flatten(groups);\n            });\n        }\n        else {\n            return this.loadBuilder(ctx)\n                .then(builder => {\n                let src = ctx.getSrc(this.getInfo());\n                console.log('start bundle all src : ', chalk.cyan(src));\n                let bcfg = this.getBuildConfig(ctx);\n                if (bcfg.config) {\n                    builder.config(bcfg.config);\n                }\n                return ctx.fileFilter(src)\n                    .then(files => {\n                    files = this.getRelativeSrc(ctx, files);\n                    console.log('bundle files:', chalk.cyan(files));\n                    let mainfile = this.getBundleManifestPath(ctx);\n                    return this.createBundler(ctx, builder, 'bundle', files.join(' + '), mainfile, bcfg)\n                        .then(trans => this.translate(trans));\n                });\n            });\n        }\n    }\n    toUrl(pathstr, relativePath) {\n        return (relativePath ? path.relative(pathstr, relativePath) : pathstr).replace(/\\\\/g, '/').replace(/^\\//g, '');\n    }\n    getRelativeSrc(ctx, src, toModule = false) {\n        // console.log(option.baseURL);\n        let baseURL = ctx.option.bundleBaseDir;\n        if (_.isArray(src)) {\n            return _.map(src, s => {\n                let filename = this.toUrl(baseURL, s);\n                return toModule ? this.toModulePath(filename) : filename;\n            });\n        }\n        else {\n            let fn = this.toUrl(baseURL, src);\n            return [(toModule ? this.toModulePath(fn) : fn)];\n        }\n    }\n    toModulePath(filename) {\n        if (!filename) {\n            return '';\n        }\n        return filename.substring(0, filename.length - path.extname(filename).length);\n    }\n    initOption(ctx) {\n        let self = this;\n        let option = _.extend({\n            baseURL: '',\n            bundleBaseDir: '.',\n            mainfile: 'bundle.js',\n            jspmConfig: '',\n            packageFile: 'package.json',\n            dest: '',\n            file: '',\n            systemConfigTempl: '',\n            relationToRoot: '',\n            bust: '',\n            bundles: null,\n            bundlePaths(ctx) {\n                let paths = {};\n                let bundleDest = ctx.getDist();\n                let rootpath = option.bundleBaseDir;\n                let dir = fs_1.readdirSync(rootpath);\n                _.each(dir, (d) => {\n                    let sf = path.join(rootpath, d);\n                    if (sf === bundleDest) {\n                        return;\n                    }\n                    let f = fs_1.lstatSync(sf);\n                    if (f.isDirectory()) {\n                        let p = d + '/*';\n                        paths[p] = self.toUrl(ctx.env.root, path.join(rootpath, p));\n                    }\n                });\n                // let jpk = <string>option.jspmPackages;\n                // let jp = path.basename(jpk) + '/*';\n                // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\n                console.log('paths: ', paths);\n                return paths;\n            },\n            includePackageFiles: [\n                'system-polyfills.src.js',\n                'system.src.js'\n            ],\n            jspmMates: {\n                '*.css': {\n                    loader: 'css'\n                },\n                '*.json': {\n                    loader: 'json'\n                },\n                '*.jsx': {\n                    loader: 'jsx'\n                }\n            },\n            builder: {\n                sfx: false,\n                minify: false,\n                mangle: false,\n                sourceMaps: false,\n                separateCSS: false,\n                lowResSourceMaps: true\n            }\n        }, ctx.option);\n        ctx.option = option;\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\n        if (!option.bundleBaseDir && ctx.parent) {\n            option.bundleBaseDir = ctx.parent.getDist();\n        }\n        else if (option.bundleBaseDir) {\n            option.bundleBaseDir = ctx.toRootPath(ctx.toStr(option.bundleBaseDir));\n        }\n        else {\n            console.log(chalk.red('bundleBaseURL config error!'));\n            process.exit(0);\n        }\n        if (option.jspmConfig) {\n            option.jspmConfig = ctx.toRootPath(ctx.toStr(option.jspmConfig));\n        }\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\n        option.mainfile = ctx.toStr(option.mainfile);\n        let pkg = ctx.getPackage(option.packageFile);\n        if (!option.jspmPackages) {\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\n                option.jspmPackages = pkg.jspm.directories.packages;\n            }\n            else {\n                option.jspmPackages = 'jspm_packages';\n            }\n        }\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\n        if (!fs_1.readdirSync(option.jspmPackages)) {\n            console.log(chalk.red('jspm project config error!'));\n            process.exit(0);\n        }\n        return option;\n    }\n    getBuildConfig(ctx) {\n        let option = ctx.option;\n        if (!option.builder.config) {\n            option.builder.config = _.extend(option.builder.config || {}, {\n                paths: _.isFunction(option.bundlePaths) ? option.bundlePaths(ctx) : (option.bundlePaths || {}),\n                rootURL: option.bundleBaseDir\n            });\n        }\n        return option.builder;\n    }\n    execute(context, gulp) {\n        this.bundleMaps = [];\n        let ctx = context;\n        return super.execute(ctx, gulp)\n            .then(() => {\n            let option = ctx.option;\n            if (option.bundles) {\n                return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\n                    return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\n                });\n            }\n            else {\n                return null;\n            }\n        }).then(manifest => {\n            if (manifest) {\n                return this.writeBundleManifest(ctx, manifest, gulp)\n                    .then(() => {\n                    console.log(chalk.green('------ Complete -------------'));\n                });\n            }\n            else {\n                console.log(chalk.green('------ Complete -------------'));\n                return null;\n            }\n        });\n    }\n    setup(ctx, gulp) {\n        ctx.option = this.initOption(ctx);\n        return super.setup(ctx, gulp);\n    }\n    working(source, ctx, option, gulp, pipes, output) {\n        let bundle = source['bundle'];\n        return super.working(source, ctx, option, gulp, pipes, output)\n            .then(() => {\n            let bundlemap = {\n                path: bundle.path,\n                modules: bundle.modules\n            };\n            this.bundleMaps.push(bundlemap);\n            if (bundle.sfx) {\n                console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            else {\n                console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            return;\n        });\n    }\n    getBundles(ctx) {\n        let groups = [];\n        if (ctx.env.gb) {\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\n        }\n        if (groups.length < 1) {\n            groups = _.keys(this.bundleConfig);\n        }\n        else {\n            groups = _.filter(groups, f => f && groups[f]);\n        }\n        console.log('cmmand group bundle:', chalk.cyan(groups));\n        return groups;\n    }\n    groupBundle(config, builder, name, bundleGp, gulp) {\n        let bundleStr = '';\n        let bundleDest = '';\n        let bundleItems = [];\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\n        if (bundleGp.items) {\n            bundleItems = _.isArray(bundleItems) ? bundleGp.items : _.keys(bundleGp.items);\n        }\n        if (bundleGp.combine) {\n            bundleDest = this.getBundleDest(config, name, bundleGp);\n            bundleStr = bundleItems.join(' + ') + minusStr;\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n        }\n        else {\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(bundleItems)}\\n-------------------------------`);\n            return Promise.all(bundleItems.map(key => {\n                bundleStr = key + minusStr;\n                bundleDest = this.getBundleDest(config, key, bundleGp);\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n            }));\n        }\n    }\n    exclusionString(exclude, groups) {\n        let str = this.exclusionArray(exclude, groups).join(' - ');\n        return (str) ? ' - ' + str : '';\n    }\n    exclusionArray(exclude, groups) {\n        let minus = [];\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\n        _.forEach(exclude, (item) => {\n            var group = groups[item];\n            if (group) {\n                // exclude everything from this group\n                minus = minus.concat(this.exclusionArray(group.items, groups));\n            }\n            else {\n                // exclude this item by name\n                minus.push(item);\n            }\n        });\n        return minus;\n    }\n    createBundler(config, builder, bundleName, bundleStr, bundleDest, builderCfg, bundleGp) {\n        let sfx = builderCfg.sfx;\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\n        let filename = path.parse(bundleDest).base;\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\n            .then(output => {\n            mkdirp.sync(path.dirname(bundleDest));\n            var stream = source(filename);\n            stream.write(output.source);\n            process.nextTick(function () {\n                stream.end();\n            });\n            console.log('pipe bundling：', chalk.cyan(bundleName));\n            return {\n                stream: stream.pipe(vinylBuffer()),\n                bundle: {\n                    path: shortPath,\n                    sfx: sfx,\n                    bundleName: bundleName,\n                    filename: filename,\n                    bundleDest: bundleDest,\n                    modules: output.modules\n                }\n            };\n        });\n    }\n    calcChecksums(option, bundles) {\n        let chksums = {};\n        console.log('Calculating checksums...');\n        return Promise.all(_.map(bundles, (bundle) => {\n            if (!_.isObject(bundle)) {\n                return null;\n            }\n            return new Promise((resolve, reject) => {\n                let filepath = path.join(option.bundleBaseDir || '.', bundle.path);\n                let filename = path.parse(bundle.path).base;\n                chksum.file(filepath, (err, sum) => {\n                    if (err) {\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\n                    }\n                    console.log(filename, chalk.cyan(sum));\n                    chksums[bundle.path] = sum;\n                    resolve(chksums);\n                });\n            });\n        })).then(() => {\n            return chksums;\n        });\n    }\n    updateBundleManifest(ctx, bundles, chksums) {\n        chksums = chksums || {};\n        var manifest = _.defaults(this.getBundleManifest(ctx), {\n            bundles: {},\n            chksums: {}\n        });\n        // console.log(manifest);\n        _.each(bundles, bundle => {\n            if (bundle.path) {\n                manifest.bundles[bundle.path] = bundle.modules;\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\n            }\n        });\n        return manifest;\n    }\n    writeBundleManifest(ctx, manifest, gulp) {\n        let option = ctx.option;\n        if (!option.mainfile) {\n            return Promise.reject('mainfile not configed.');\n        }\n        console.log('Writing manifest...');\n        let output = `\r\nSystem.config({\r\n    baseURL: '${path.relative(option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\n        let template = '';\n        if (manifest) {\n            // try {\n            template = ctx.toStr(option.systemConfigTempl);\n            if (!template) {\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\n            }\n            let maps = {\n                css: 'github:systemjs/plugin-css@0.1.20.js',\n                json: 'github:systemjs/plugin-json@0.1.2.js'\n            };\n            _.each(_.keys(manifest.bundles), n => {\n                if (/css.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n                if (/json.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n            });\n            let jspmMetas = option.jspmMates;\n            output += _.template(template)({\n                maps: JSON.stringify(maps, null, '    '),\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\n                paths: JSON.stringify(option.builder.config ? option.builder.config.paths : null, null, '    '),\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\n            });\n        }\n        let includes = option.includes || [];\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\n        return Promise.all(_.map(includes, f => {\n            return new Promise((resolve, reject) => {\n                fs_1.readFile(f, 'utf8', (err, data) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(data);\n                    }\n                });\n            });\n        }))\n            .then(data => {\n            data.push(output);\n            let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\n            console.log('mainfile:', mainfile);\n            mkdirp.sync(path.dirname(mainfile));\n            var stream = source(mainfile);\n            stream.write(data.join('\\n'));\n            process.nextTick(() => {\n                stream.end();\n            });\n            return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\n        });\n    }\n    getBundleManifestPath(ctx) {\n        return this.getBundleDest(ctx, ctx.option.mainfile);\n    }\n    getBundleManifest(ctx) {\n        let data = {};\n        let mainfile = this.getBundleManifestPath(ctx);\n        console.log('try to load old bundle in path ', mainfile);\n        if (fs_1.existsSync(mainfile)) {\n            try {\n                let content = fs_1.readFileSync(mainfile, 'utf8');\n                let idx = content.indexOf(this.manifestSplit);\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\n                content = content.substring(idx);\n                // console.log(content);\n                fs_1.writeFileSync(mainfile, content);\n                data = require(mainfile);\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n            }\n            catch (e) {\n                console.log(chalk.red(e));\n            }\n        }\n        else {\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n        }\n        return data;\n    }\n    getBundleShortPath(ctx, bundleName, bundleGp) {\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\n            : path.join(ctx.getDist(), bundleName);\n        return this.toUrl(ctx.option.bundleBaseDir, fullPath);\n    }\n    getBundleDest(ctx, bundleName, bundleGp) {\n        let dest = ctx.getDist();\n        if (bundleGp) {\n            let min = bundleGp.builder.minify;\n            let name = bundleGp.items[bundleName] || bundleName;\n            let file = name + ((min) ? '.min.js' : '.js');\n            if (bundleGp.combine) {\n                dest = path.join(dest, file);\n            }\n            else {\n                dest = path.join(dest, bundleName, file);\n            }\n        }\n        else {\n            dest = path.join(dest, bundleName);\n        }\n        return dest;\n    }\n};\nJspmBundle = __decorate([\n    development_core_1.task({\n        oper: development_core_1.Operation.release | development_core_1.Operation.deploy\n    }), \n    __metadata('design:paramtypes', [Object])\n], JspmBundle);\nexports.JspmBundle = JspmBundle;\n","import * as _ from 'lodash';\r\nimport { IMap, task, RunWay, IAssertDist, ITaskContext, Src, Pipe, OutputPipe, ITaskInfo, TransformSource, ITransform, Operation, PipeTask, bindingConfig } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IBundlesConfig, IBundleGroup, IBuidlerConfig, IBundleMap, IBundleTransform } from './config';\r\n\r\nimport { readFileSync, readFile, existsSync, lstatSync, writeFileSync, readdirSync } from 'fs';\r\nimport * as chalk from 'chalk';\r\n// const globby = require('globby');\r\nconst jspm = require('jspm');\r\nconst source = require('vinyl-source-stream');\r\nconst vinylBuffer = require('vinyl-buffer');\r\nconst chksum = require('checksum');\r\nconst mkdirp = require('mkdirp');\r\n// const uglify = require('gulp-uglify');\r\n\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class JspmBundle extends PipeTask {\r\n\r\n    name = 'jspm-bundle';\r\n    runWay = RunWay.sequence;\r\n    private bundleMaps: IBundleMap[];\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    protected getOption(config: ITaskContext): IAssertDist {\r\n        return config.option;\r\n    }\r\n\r\n    protected loadBuilder(ctx: ITaskContext): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\r\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\r\n\r\n        return Promise.resolve(jsbuilder)\r\n            .then(builder => {\r\n                if (option.jspmConfig) {\r\n                    return builder.loadConfig(option.jspmConfig, undefined, true)\r\n                        .then(() => {\r\n                            return builder;\r\n                        });\r\n                } else {\r\n                    return builder;\r\n                }\r\n            });\r\n    }\r\n\r\n    private translate(trans: IBundleTransform | IBundleTransform[]): ITransform | ITransform[] {\r\n        if (_.isArray(trans)) {\r\n            return _.map(trans, t => {\r\n                t.stream['bundle'] = t.bundle;\r\n                return t.stream;\r\n            });\r\n        } else {\r\n            trans.stream['bundle'] = trans.bundle;\r\n            return trans.stream;\r\n        }\r\n    }\r\n\r\n    private bundleConfig: IMap<IBundleGroup>;\r\n    initBundles(ctx: ITaskContext): Promise<IMap<IBundleGroup>> {\r\n        let opt = <IBundlesConfig>ctx.option;\r\n        let pr = Promise.resolve<IMap<IBundleGroup>>(null)\r\n            .then(() => {\r\n                if (_.isFunction(opt.bundles)) {\r\n                    // opt['_bundlesFunc'] = opt.bundles;\r\n                    return opt.bundles(ctx);\r\n                } else {\r\n                    return opt.bundles;\r\n                }\r\n            });\r\n\r\n        if (opt.bundleDeps) {\r\n            pr = pr.then(bundles => {\r\n                let pkg = ctx.getPackage(<string>opt.packageFile);\r\n                if (!pkg) {\r\n                    console.log(chalk.red('can not found package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                if (!pkg.jspm) {\r\n                    console.log(chalk.red('jspm not init in package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                let deps = _.keys(pkg.jspm.dependencies);\r\n                if (opt.depsExclude) {\r\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\r\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\r\n                }\r\n\r\n                return Promise.resolve()\r\n                    .then(() => {\r\n                        if (_.isFunction(opt.bundleDeps)) {\r\n                            // opt['_bundleDepsFunc'] = opt.bundleDeps;\r\n                            return opt.bundleDeps(ctx, deps);\r\n                        } else if (_.isBoolean(opt.bundleDeps)) {\r\n                            return {\r\n                                deplibs: {\r\n                                    combine: true,\r\n                                    items: deps\r\n                                }\r\n                            };\r\n                        } else {\r\n                            return opt.bundleDeps;\r\n                        }\r\n                    })\r\n                    .then(bundleDeps => {\r\n\r\n                        let cores = _.keys(bundleDeps);\r\n                        _.each(_.keys(bundles), n => {\r\n                            let b: IBundleGroup = bundles[n];\r\n                            b.exclude = b.exclude || [];\r\n                            b.exclude = cores.concat(b.exclude);\r\n                            bundleDeps[n] = b;\r\n                        });\r\n\r\n                        return bundleDeps;\r\n                    });\r\n            });\r\n        }\r\n\r\n        return pr.then(bundles => {\r\n            this.bundleConfig = bundles;\r\n            console.log('group bundles setting:\\n', bundles, '---------------------------------\\n');\r\n            return bundles;\r\n        });\r\n\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (option.bundles) {\r\n            return this.initBundles(<ITaskContext>ctx)\r\n                .then(() => {\r\n                    return Promise.all(_.map(this.getBundles(ctx), name => {\r\n                        return this.loadBuilder(ctx)\r\n                            .then(builder => {\r\n                                let bundle: IBundleGroup = this.bundleConfig[name];\r\n                                let bcfg = this.getBuildConfig(ctx);\r\n                                bundle.builder = <IBuidlerConfig>_.defaults(bundle.builder, bcfg);\r\n                                if (bundle.builder.config) {\r\n                                    builder.config(bundle.builder.config);\r\n                                }\r\n                                return this.groupBundle(<ITaskContext>ctx, builder, name, bundle, gulp)\r\n                                    .then(trans => this.translate(trans));\r\n                            });\r\n                    }))\r\n                }).then(groups => {\r\n                    return _.flatten(groups);\r\n                });\r\n        } else {\r\n            return this.loadBuilder(ctx)\r\n                .then(builder => {\r\n                    let src = ctx.getSrc(this.getInfo());\r\n                    console.log('start bundle all src : ', chalk.cyan(<any>src));\r\n                    let bcfg = this.getBuildConfig(ctx);\r\n                    if (bcfg.config) {\r\n                        builder.config(bcfg.config)\r\n                    }\r\n\r\n                    return ctx.fileFilter(src)\r\n                        .then(files => {\r\n                            files = this.getRelativeSrc(ctx, files);\r\n                            console.log('bundle files:', chalk.cyan(<any>files));\r\n                            let mainfile = this.getBundleManifestPath(<ITaskContext>ctx);\r\n                            return this.createBundler(<ITaskContext>ctx, builder, 'bundle', files.join(' + '), mainfile, bcfg)\r\n                                .then(trans => this.translate(trans));\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    private toUrl(pathstr: string, relativePath?: string) {\r\n        return (relativePath ? path.relative(pathstr, relativePath) : pathstr).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n    }\r\n\r\n    private getRelativeSrc(ctx: ITaskContext, src: Src, toModule = false): string[] {\r\n        // console.log(option.baseURL);\r\n        let baseURL = <string>(<IBundlesConfig>ctx.option).bundleBaseDir;\r\n        if (_.isArray(src)) {\r\n            return _.map(src, s => {\r\n                let filename = this.toUrl(baseURL, s);\r\n                return toModule ? this.toModulePath(filename) : filename;\r\n            });\r\n        } else {\r\n            let fn = this.toUrl(baseURL, src);\r\n            return [(toModule ? this.toModulePath(fn) : fn)];\r\n        }\r\n    }\r\n\r\n    private toModulePath(filename: string): string {\r\n        if (!filename) {\r\n            return '';\r\n        }\r\n        return filename.substring(0, filename.length - path.extname(filename).length);\r\n    }\r\n\r\n    private initOption(ctx: ITaskContext) {\r\n        let self = this;\r\n        let option = <IBundlesConfig>_.extend(<IBundlesConfig>{\r\n            baseURL: '',\r\n            bundleBaseDir: '.',\r\n            mainfile: 'bundle.js',\r\n            jspmConfig: '',\r\n            packageFile: 'package.json',\r\n            dest: '',\r\n            file: '',\r\n            systemConfigTempl: '',\r\n            relationToRoot: '',\r\n            bust: '',\r\n            bundles: null,\r\n            bundlePaths(ctx) {\r\n                let paths: any = {};\r\n                let bundleDest = ctx.getDist();\r\n                let rootpath = <string>option.bundleBaseDir;\r\n                let dir = readdirSync(rootpath);\r\n                _.each(dir, (d: string) => {\r\n\r\n                    let sf = path.join(rootpath, d);\r\n                    if (sf === bundleDest) {\r\n                        return;\r\n                    }\r\n                    let f = lstatSync(sf);\r\n                    if (f.isDirectory()) {\r\n                        let p = d + '/*';\r\n                        paths[p] = self.toUrl(ctx.env.root, path.join(rootpath, p));\r\n                    }\r\n                });\r\n                // let jpk = <string>option.jspmPackages;\r\n                // let jp = path.basename(jpk) + '/*';\r\n                // paths[jp] = self.toUrl(rootpath, path.join(jpk, jp));\r\n                console.log('paths: ', paths);\r\n                return paths;\r\n            },\r\n            includePackageFiles: [\r\n                'system-polyfills.src.js',\r\n                'system.src.js'\r\n            ],\r\n            jspmMates: {\r\n                '*.css': {\r\n                    loader: 'css'\r\n                },\r\n                '*.json': {\r\n                    loader: 'json'\r\n                },\r\n                '*.jsx': {\r\n                    loader: 'jsx'\r\n                }\r\n            },\r\n            builder: {\r\n                sfx: false,\r\n                minify: false,\r\n                mangle: false,\r\n                sourceMaps: false,\r\n                separateCSS: false,\r\n                lowResSourceMaps: true\r\n            }\r\n        }, <IBundlesConfig>ctx.option);\r\n\r\n        ctx.option = option;\r\n\r\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\r\n        if (!option.bundleBaseDir && ctx.parent) {\r\n            option.bundleBaseDir = ctx.parent.getDist()\r\n        } else if (option.bundleBaseDir) {\r\n            option.bundleBaseDir = ctx.toRootPath(ctx.toStr(option.bundleBaseDir));\r\n        } else {\r\n            console.log(chalk.red('bundleBaseURL config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        if (option.jspmConfig) {\r\n            option.jspmConfig = ctx.toRootPath(ctx.toStr(option.jspmConfig));\r\n        }\r\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\r\n        option.mainfile = ctx.toStr(option.mainfile);\r\n        let pkg = ctx.getPackage(<string>option.packageFile);\r\n        if (!option.jspmPackages) {\r\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\r\n                option.jspmPackages = <string>pkg.jspm.directories.packages;\r\n            } else {\r\n                option.jspmPackages = 'jspm_packages';\r\n            }\r\n        }\r\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\r\n\r\n        if (!readdirSync(option.jspmPackages)) {\r\n            console.log(chalk.red('jspm project config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        return option;\r\n    }\r\n\r\n    getBuildConfig(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.builder.config) {\r\n            option.builder.config = _.extend(option.builder.config || {}, {\r\n                paths: _.isFunction(option.bundlePaths) ? option.bundlePaths(<ITaskContext>ctx) : (option.bundlePaths || {}),\r\n                rootURL: <string>option.bundleBaseDir\r\n            });\r\n        }\r\n\r\n        return option.builder;\r\n    }\r\n\r\n    execute(context: ITaskContext, gulp: Gulp) {\r\n        this.bundleMaps = [];\r\n        let ctx = <ITaskContext>context;\r\n        return super.execute(ctx, gulp)\r\n            .then(() => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                if (option.bundles) {\r\n                    return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\r\n                        return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\r\n                    });\r\n                } else {\r\n                    return null;\r\n                }\r\n            }).then(manifest => {\r\n                if (manifest) {\r\n                    return this.writeBundleManifest(ctx, manifest, gulp)\r\n                        .then(() => {\r\n                            console.log(chalk.green('------ Complete -------------'));\r\n                        });\r\n                } else {\r\n                    console.log(chalk.green('------ Complete -------------'));\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        ctx.option = this.initOption(ctx);\r\n        return super.setup(ctx, gulp);\r\n    }\r\n\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        let bundle = <IBundleMap>source['bundle'];\r\n        return super.working(source, ctx, option, gulp, pipes, output)\r\n            .then(() => {\r\n                let bundlemap: IBundleMap = {\r\n                    path: bundle.path,\r\n                    modules: bundle.modules\r\n                };\r\n                this.bundleMaps.push(bundlemap);\r\n                if (bundle.sfx) {\r\n                    console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                } else {\r\n                    console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                }\r\n                return;\r\n            });\r\n    }\r\n\r\n    getBundles(ctx: ITaskContext) {\r\n\r\n        let groups = [];\r\n        if (ctx.env.gb) {\r\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\r\n        }\r\n\r\n        if (groups.length < 1) {\r\n            groups = _.keys(this.bundleConfig);\r\n        } else {\r\n            groups = _.filter(groups, f => f && groups[f]);\r\n        }\r\n        console.log('cmmand group bundle:', chalk.cyan(<any>groups));\r\n        return groups;\r\n    }\r\n\r\n    protected groupBundle(config: ITaskContext, builder, name: string, bundleGp: IBundleGroup, gulp: Gulp): Promise<IBundleTransform | IBundleTransform[]> {\r\n\r\n        let bundleStr = '';\r\n        let bundleDest = '';\r\n\r\n        let bundleItems: string[] = [];\r\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\r\n\r\n        if (bundleGp.items) {\r\n            bundleItems = _.isArray(bundleItems) ? <string[]>bundleGp.items : _.keys(bundleGp.items);\r\n        }\r\n\r\n        if (bundleGp.combine) {\r\n            bundleDest = this.getBundleDest(config, name, bundleGp);\r\n            bundleStr = bundleItems.join(' + ') + minusStr;\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\r\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n\r\n        } else {\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(<any>bundleItems)}\\n-------------------------------`);\r\n            return Promise.all(bundleItems.map(key => {\r\n                bundleStr = key + minusStr;\r\n                bundleDest = this.getBundleDest(config, key, bundleGp);\r\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n            }));\r\n        }\r\n    }\r\n\r\n    private exclusionString(exclude, groups): string {\r\n        let str = this.exclusionArray(exclude, groups).join(' - ');\r\n        return (str) ? ' - ' + str : '';\r\n    }\r\n\r\n    private exclusionArray(exclude, groups): string[] {\r\n        let minus: string[] = [];\r\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\r\n        _.forEach(exclude, (item: string) => {\r\n            var group = groups[item];\r\n            if (group) {\r\n                // exclude everything from this group\r\n                minus = minus.concat(this.exclusionArray(group.items, groups));\r\n            } else {\r\n                // exclude this item by name\r\n                minus.push(item);\r\n            }\r\n        });\r\n        return minus;\r\n    }\r\n\r\n    private createBundler(config: ITaskContext, builder: any, bundleName: string, bundleStr: string, bundleDest: string, builderCfg: IBuidlerConfig, bundleGp?: IBundleGroup): Promise<IBundleTransform> {\r\n\r\n        let sfx = builderCfg.sfx;\r\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\r\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\r\n        let filename = path.parse(bundleDest).base;\r\n\r\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\r\n            .then(output => {\r\n                mkdirp.sync(path.dirname(bundleDest));\r\n                var stream: ITransform = source(filename);\r\n                stream.write(output.source);\r\n                process.nextTick(function () {\r\n                    stream.end();\r\n                });\r\n\r\n                console.log('pipe bundling：', chalk.cyan(bundleName));\r\n                return {\r\n                    stream: stream.pipe(vinylBuffer()),\r\n                    bundle: {\r\n                        path: shortPath,\r\n                        sfx: sfx,\r\n                        bundleName: bundleName,\r\n                        filename: filename,\r\n                        bundleDest: bundleDest,\r\n                        modules: output.modules\r\n                    }\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    private calcChecksums(option: IBundlesConfig, bundles: any[]): Promise<any> {\r\n        let chksums = {};\r\n\r\n        console.log('Calculating checksums...');\r\n\r\n        return Promise.all(_.map(bundles, (bundle: any) => {\r\n            if (!_.isObject(bundle)) {\r\n                return null;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let filepath = path.join(<string>option.bundleBaseDir || '.', bundle.path);\r\n                let filename = path.parse(bundle.path).base;\r\n                chksum.file(filepath, (err, sum) => {\r\n                    if (err) {\r\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\r\n                    }\r\n                    console.log(filename, chalk.cyan(sum));\r\n                    chksums[bundle.path] = sum;\r\n                    resolve(chksums);\r\n                });\r\n            });\r\n\r\n        })).then(() => {\r\n            return chksums;\r\n        });\r\n    }\r\n\r\n    protected updateBundleManifest(ctx: ITaskContext, bundles: any[], chksums?: any) {\r\n\r\n        chksums = chksums || {};\r\n\r\n        var manifest: any = _.defaults(this.getBundleManifest(ctx), {\r\n            bundles: {},\r\n            chksums: {}\r\n        });\r\n\r\n        // console.log(manifest);\r\n\r\n        _.each(bundles, bundle => {\r\n            if (bundle.path) {\r\n                manifest.bundles[bundle.path] = bundle.modules;\r\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\r\n            }\r\n        });\r\n\r\n        return manifest;\r\n\r\n    }\r\n\r\n    private manifestSplit = `/*------bundles infos------*/`;\r\n    private writeBundleManifest(ctx: ITaskContext, manifest, gulp: Gulp): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (!option.mainfile) {\r\n            return Promise.reject('mainfile not configed.');\r\n        }\r\n\r\n\r\n        console.log('Writing manifest...');\r\n\r\n\r\n        let output = `\r\nSystem.config({\r\n    baseURL: '${ path.relative(<string>option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\r\n        let template = '';\r\n\r\n        if (manifest) {\r\n            // try {\r\n            template = ctx.toStr(option.systemConfigTempl);\r\n\r\n            if (!template) {\r\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\r\n            }\r\n\r\n\r\n            let maps = {\r\n                css: 'github:systemjs/plugin-css@0.1.20.js',\r\n                json: 'github:systemjs/plugin-json@0.1.2.js'\r\n            };\r\n\r\n            _.each(_.keys(manifest.bundles), n => {\r\n                if (/css.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n                if (/json.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n            });\r\n\r\n            let jspmMetas = option.jspmMates;\r\n            output += _.template(template)({\r\n                maps: JSON.stringify(maps, null, '    '),\r\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\r\n                paths: JSON.stringify(option.builder.config ? option.builder.config.paths : null, null, '    '),\r\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\r\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let includes = option.includes || [];\r\n\r\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\r\n\r\n        return Promise.all(_.map(includes, f => {\r\n            return new Promise<string>((resolve, reject) => {\r\n                readFile(f, 'utf8', (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            });\r\n        }))\r\n            .then(data => {\r\n                data.push(output);\r\n                let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\r\n                console.log('mainfile:', mainfile);\r\n                mkdirp.sync(path.dirname(mainfile));\r\n                var stream = <NodeJS.ReadWriteStream>source(mainfile);\r\n                stream.write(data.join('\\n'));\r\n                process.nextTick(() => {\r\n                    stream.end();\r\n                });\r\n\r\n                return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\r\n            });\r\n\r\n    }\r\n\r\n    private getBundleManifestPath(ctx: ITaskContext): string {\r\n        return this.getBundleDest(ctx, <string>(<IBundlesConfig>ctx.option).mainfile);\r\n    }\r\n    private getBundleManifest(ctx: ITaskContext): any {\r\n        let data: any = {};\r\n        let mainfile: string = this.getBundleManifestPath(ctx);\r\n        console.log('try to load old bundle in path ', mainfile);\r\n        if (existsSync(mainfile)) {\r\n            try {\r\n                let content = readFileSync(mainfile, 'utf8');\r\n                let idx = content.indexOf(this.manifestSplit);\r\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\r\n                content = content.substring(idx);\r\n                // console.log(content);\r\n                writeFileSync(mainfile, content);\r\n                data = require(mainfile);\r\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n            } catch (e) {\r\n                console.log(chalk.red(e));\r\n            }\r\n        } else {\r\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private getBundleShortPath(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\r\n            : path.join(ctx.getDist(), bundleName);\r\n\r\n        return this.toUrl(<string>(<IBundlesConfig>ctx.option).bundleBaseDir, fullPath)\r\n\r\n    }\r\n\r\n    private getBundleDest(ctx: ITaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n\r\n        let dest = ctx.getDist();\r\n        if (bundleGp) {\r\n            let min = bundleGp.builder.minify;\r\n            let name = bundleGp.items[bundleName] || bundleName;\r\n            let file = name + ((min) ? '.min.js' : '.js');\r\n\r\n            if (bundleGp.combine) {\r\n                dest = path.join(dest, file);\r\n            } else {\r\n                dest = path.join(dest, bundleName, file);\r\n            }\r\n        } else {\r\n            dest = path.join(dest, bundleName);\r\n        }\r\n\r\n        return dest;\r\n    }\r\n}\r\n"]}