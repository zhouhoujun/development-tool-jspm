{"version":3,"sources":["JspmBundle.js","JspmBundle.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","path","fs_1","chalk","globby","jspm","source","vinylBuffer","chksum","mkdirp","JspmBundle","info","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","name","runWay","RunWay","sequence","packages","manifestSplit","_inherits","_development_core_1$P","_createClass","value","config","option","ctx","setPackagePath","dirname","packageFile","jsbuilder","Builder","separateCSS","builder","Promise","resolve","then","jspmConfig","loadConfig","undefined","trans","isArray","map","t","stream","bundle","_this2","bundles","opt","isFunction","bundleDeps","pkg","getPackage","console","log","red","process","exit","deps","keys","dependencies","depsExclude","exclude","filter","indexOf","isBoolean","deplibs","combine","items","cores","each","values","b","concat","bundleConfig","dist","gulp","_this3","initBundles","all","getBundles","loadBuilder","defaults","groupBundle","translate","groups","flatten","src","getSrc","getInfo","cyan","files","getRelativeSrc","createBundler","join","toRootPath","mainfile","_this4","toModule","baseURL","s","filename","relative","replace","toModulePath","fn","substring","extname","extend","dest","file","systemConfigTempl","relationToRoot","bust","includePackageFiles","jspmMates","*.css","loader","*.json","*.jsx","sfx","minify","mangle","sourceMaps","lowResSourceMaps","jspmPackages","directories","readdirSync","context","_this5","bundleMaps","_get","prototype","calcChecksums","checksums","updateBundleManifest","manifest","writeBundleManifest","green","initOption","pipes","output","_this6","bundlemap","modules","push","bundleName","bundleDest","env","gb","uniq","split","f","bundleGp","_this7","bundleStr","bundleItems","minusStr","exclusionString","getBundleDest","str","exclusionArray","_this8","minus","forEach","item","group","builderCfg","bundler","buildStatic","shortPath","getBundleShortPath","parse","base","bind","sync","write","nextTick","end","pipe","chksums","isObject","reject","filepath","err","sum","error","getBundleManifest","_this9","root","template","maps","css","json","n","test","first","jspmMetas","JSON","stringify","jspmMeta","paths","includes","readFile","data","mainfilePipes","mainfileOutput","getBundleManifestPath","existsSync","content","readFileSync","idx","writeFileSync","e","fullPath","getDist","spath","min","PipeTask","task","oper","Operation","release","deploy","exports"],"mappings":"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","file":"../JspmBundle.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst path = require('path');\nconst fs_1 = require('fs');\nconst chalk = require('chalk');\nconst globby = require('globby');\nconst jspm = require('jspm');\nconst source = require('vinyl-source-stream');\nconst vinylBuffer = require('vinyl-buffer');\nconst chksum = require('checksum');\nconst mkdirp = require('mkdirp');\n// const uglify = require('gulp-uglify');\nlet JspmBundle = class JspmBundle extends development_core_1.PipeTask {\n    constructor(info) {\n        super(info);\n        this.name = 'jspm-bundle';\n        this.runWay = development_core_1.RunWay.sequence;\n        this.packages = {};\n        this.manifestSplit = `/*------bundles infos------*/`;\n    }\n    getOption(config) {\n        return config.option;\n    }\n    loadBuilder(ctx) {\n        let option = ctx.option;\n        jspm.setPackagePath(path.dirname(option.packageFile));\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\n        return Promise.resolve(jsbuilder)\n            .then(builder => {\n            if (option.jspmConfig) {\n                return builder.loadConfig(option.jspmConfig, undefined, true)\n                    .then(() => {\n                    return builder;\n                });\n            }\n            else {\n                return builder;\n            }\n        });\n    }\n    translate(trans) {\n        if (_.isArray(trans)) {\n            return _.map(trans, t => {\n                t.stream['bundle'] = t.bundle;\n                return t.stream;\n            });\n        }\n        else {\n            trans.stream['bundle'] = trans.bundle;\n            return trans.stream;\n        }\n    }\n    initBundles(ctx) {\n        let bundles = null;\n        let opt = ctx.option;\n        if (_.isFunction(opt.bundles)) {\n            // opt['_bundlesFunc'] = opt.bundles;\n            bundles = opt.bundles(ctx);\n        }\n        if (opt.bundleDeps) {\n            let pkg = this.getPackage(opt);\n            if (!pkg) {\n                console.log(chalk.red('can not found package.json file.'));\n                process.exit(0);\n            }\n            if (!pkg.jspm) {\n                console.log(chalk.red('jspm not init in package.json file.'));\n                process.exit(0);\n            }\n            let deps = _.keys(pkg.jspm.dependencies);\n            if (opt.depsExclude) {\n                let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\n                deps = _.filter(deps, d => exclude.indexOf(d) < 0);\n            }\n            let bundleDeps;\n            if (_.isFunction(opt.bundleDeps)) {\n                // opt['_bundleDepsFunc'] = opt.bundleDeps;\n                bundleDeps = opt.bundleDeps(ctx, deps);\n            }\n            else if (_.isBoolean(opt.bundleDeps)) {\n                opt.bundleDeps = {\n                    deplibs: {\n                        combine: true,\n                        items: deps\n                    }\n                };\n            }\n            else {\n                bundleDeps = opt.bundleDeps;\n            }\n            let cores = _.keys(bundleDeps);\n            _.each(_.values(bundles), (b) => {\n                b.exclude = b.exclude || [];\n                b.exclude = cores.concat(b.exclude);\n            });\n        }\n        this.bundleConfig = bundles;\n    }\n    source(ctx, dist, gulp) {\n        let option = ctx.option;\n        if (option.bundles) {\n            this.initBundles(ctx);\n            return Promise.all(_.map(this.getBundles(ctx), name => {\n                return this.loadBuilder(ctx)\n                    .then(builder => {\n                    let bundle = this.bundleConfig[name];\n                    bundle.builder = _.defaults(bundle.builder, option.builder);\n                    if (option.builder.config) {\n                        builder.config(bundle.builder.config);\n                    }\n                    return this.groupBundle(ctx, builder, name, bundle, gulp)\n                        .then(trans => this.translate(trans));\n                });\n            })).then(groups => {\n                return _.flatten(groups);\n            });\n        }\n        else {\n            return this.loadBuilder(ctx)\n                .then(builder => {\n                let src = ctx.getSrc(this.getInfo());\n                console.log('start bundle all src : ', chalk.cyan(src));\n                if (option.builder.config) {\n                    builder.config(option.builder.config);\n                }\n                return Promise.resolve(globby(src))\n                    .then(files => {\n                    files = this.getRelativeSrc(files, ctx);\n                    console.log('bundle files:', chalk.cyan(files));\n                    return this.createBundler(ctx, builder, 'bundle', files.join(' + '), ctx.toRootPath(option.mainfile), option.builder)\n                        .then(trans => this.translate(trans));\n                });\n            });\n        }\n    }\n    getRelativeSrc(src, config, toModule = false) {\n        // console.log(option.baseURL);\n        let baseURL = config.option.baseURL;\n        if (_.isArray(src)) {\n            return _.map(src, s => {\n                let filename = path.relative(baseURL, s).replace(/\\\\/g, '/').replace(/^\\//g, '');\n                return toModule ? this.toModulePath(filename) : filename;\n            });\n        }\n        else {\n            let fn = path.relative(baseURL, src).replace(/\\\\/g, '/').replace(/^\\//g, '');\n            return [(toModule ? this.toModulePath(fn) : fn)];\n        }\n    }\n    toModulePath(filename) {\n        if (!filename) {\n            return '';\n        }\n        return filename.substring(0, filename.length - path.extname(filename).length);\n    }\n    initOption(ctx) {\n        let option = _.extend({\n            baseURL: '',\n            mainfile: 'bundle.js',\n            jspmConfig: '',\n            packageFile: 'package.json',\n            dest: '',\n            file: '',\n            systemConfigTempl: '',\n            relationToRoot: '',\n            bust: '',\n            bundles: null,\n            includePackageFiles: [\n                'system-polyfills.src.js',\n                'system.src.js'\n            ],\n            jspmMates: {\n                '*.css': {\n                    loader: 'css'\n                },\n                '*.json': {\n                    loader: 'json'\n                },\n                '*.jsx': {\n                    loader: 'jsx'\n                }\n            },\n            builder: {\n                sfx: false,\n                minify: false,\n                mangle: false,\n                sourceMaps: false,\n                separateCSS: false,\n                lowResSourceMaps: true\n            }\n        }, ctx.option);\n        option.baseURL = ctx.toRootPath(option.baseURL);\n        if (option.jspmConfig) {\n            option.jspmConfig = ctx.toRootPath(option.jspmConfig);\n        }\n        option.packageFile = ctx.toRootPath(option.packageFile);\n        let pkg = this.getPackage(option);\n        if (!option.jspmPackages) {\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\n                option.jspmPackages = pkg.jspm.directories.packages;\n            }\n            else {\n                option.jspmPackages = 'jspm_packages';\n            }\n        }\n        option.jspmPackages = ctx.toRootPath(option.jspmPackages);\n        if (!fs_1.readdirSync(option.jspmPackages)) {\n            console.log(chalk.red('jspm project config error!'));\n            process.exit(0);\n        }\n        return option;\n    }\n    execute(context, gulp) {\n        this.bundleMaps = [];\n        let ctx = context;\n        return super.execute(ctx, gulp)\n            .then(() => {\n            let option = ctx.option;\n            if (option.bundles) {\n                return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\n                    return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\n                });\n            }\n            else {\n                return null;\n            }\n        }).then(manifest => {\n            if (manifest) {\n                return this.writeBundleManifest(ctx, manifest, gulp)\n                    .then(() => {\n                    console.log(chalk.green('------ Complete -------------'));\n                });\n            }\n            else {\n                console.log(chalk.green('------ Complete -------------'));\n                return null;\n            }\n        });\n    }\n    setup(ctx, gulp) {\n        ctx.option = this.initOption(ctx);\n        return super.setup(ctx, gulp);\n    }\n    working(source, ctx, option, gulp, pipes, output) {\n        let bundle = source['bundle'];\n        return super.working(source, ctx, option, gulp, pipes, output)\n            .then(() => {\n            let bundlemap = {\n                path: bundle.path,\n                modules: bundle.modules\n            };\n            this.bundleMaps.push(bundlemap);\n            if (bundle.sfx) {\n                console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            else {\n                console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            return;\n        });\n    }\n    getBundles(ctx) {\n        let groups = [];\n        if (ctx.env.gb) {\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\n        }\n        if (groups.length < 1) {\n            groups = _.keys(this.bundleConfig);\n        }\n        else {\n            groups = _.filter(groups, f => f && groups[f]);\n        }\n        console.log('cmmand group bundle:', chalk.cyan(groups));\n        return groups;\n    }\n    groupBundle(config, builder, name, bundleGp, gulp) {\n        let bundleStr = '';\n        let bundleDest = '';\n        let bundleItems = [];\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\n        if (bundleGp.items) {\n            bundleItems = _.isArray(bundleItems) ? bundleGp.items : _.keys(bundleGp.items);\n        }\n        if (bundleGp.combine) {\n            bundleDest = this.getBundleDest(config, name, bundleGp);\n            bundleStr = bundleItems.join(' + ') + minusStr;\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n        }\n        else {\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(bundleItems)}\\n-------------------------------`);\n            return Promise.all(bundleItems.map(key => {\n                bundleStr = key + minusStr;\n                bundleDest = this.getBundleDest(config, key, bundleGp);\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n            }));\n        }\n    }\n    exclusionString(exclude, groups) {\n        let str = this.exclusionArray(exclude, groups).join(' - ');\n        return (str) ? ' - ' + str : '';\n    }\n    exclusionArray(exclude, groups) {\n        let minus = [];\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\n        _.forEach(exclude, (item) => {\n            var group = groups[item];\n            if (group) {\n                // exclude everything from this group\n                minus = minus.concat(this.exclusionArray(group.items, groups));\n            }\n            else {\n                // exclude this item by name\n                minus.push(item);\n            }\n        });\n        return minus;\n    }\n    createBundler(config, builder, bundleName, bundleStr, bundleDest, builderCfg, bundleGp) {\n        let sfx = builderCfg.sfx;\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\n        let filename = path.parse(bundleDest).base;\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\n            .then(output => {\n            mkdirp.sync(path.dirname(bundleDest));\n            var stream = source(filename);\n            stream.write(output.source);\n            process.nextTick(function () {\n                stream.end();\n            });\n            // transform['bundle'] = {\n            //     sfx: sfx,\n            //     path: shortPath,\n            //     bundleName: bundleName,\n            //     filename: filename,\n            //     bundleDest: bundleDest,\n            //     modules: output.modules\n            // };\n            return {\n                stream: stream.pipe(vinylBuffer()),\n                bundle: {\n                    path: shortPath,\n                    sfx: sfx,\n                    bundleName: bundleName,\n                    filename: filename,\n                    bundleDest: bundleDest,\n                    modules: output.modules\n                }\n            };\n        });\n    }\n    getPackage(option) {\n        if (!this.packages[option.packageFile]) {\n            this.packages[option.packageFile] = require(option.packageFile);\n        }\n        return this.packages[option.packageFile];\n    }\n    calcChecksums(option, bundles) {\n        let chksums = {};\n        console.log('Calculating checksums...');\n        return Promise.all(_.map(bundles, (bundle) => {\n            if (!_.isObject(bundle)) {\n                return null;\n            }\n            return new Promise((resolve, reject) => {\n                let filepath = path.join(option.baseURL || '.', bundle.path);\n                let filename = path.parse(bundle.path).base;\n                chksum.file(filepath, (err, sum) => {\n                    if (err) {\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\n                    }\n                    console.log(filename, chalk.cyan(sum));\n                    chksums[bundle.path] = sum;\n                    resolve(chksums);\n                });\n            });\n        })).then(() => {\n            return chksums;\n        });\n    }\n    updateBundleManifest(ctx, bundles, chksums) {\n        chksums = chksums || {};\n        var manifest = _.defaults(this.getBundleManifest(ctx), {\n            bundles: {},\n            chksums: {}\n        });\n        // console.log(manifest);\n        _.each(bundles, bundle => {\n            if (bundle.path) {\n                manifest.bundles[bundle.path] = bundle.modules;\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\n            }\n        });\n        return manifest;\n    }\n    writeBundleManifest(ctx, manifest, gulp) {\n        let option = ctx.option;\n        if (!option.mainfile) {\n            return Promise.reject('mainfile not configed.');\n        }\n        console.log('Writing manifest...');\n        let output = `\r\nSystem.config({\r\n    baseURL: '${path.relative(option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\n        let template = '';\n        if (manifest) {\n            // try {\n            template = option.systemConfigTempl;\n            if (!template) {\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\n            }\n            let maps = {\n                css: 'github:systemjs/plugin-css@0.1.20.js',\n                json: 'github:systemjs/plugin-json@0.1.2.js'\n            };\n            _.each(_.keys(manifest.bundles), n => {\n                if (/css.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n                if (/json.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n            });\n            let jspmMetas = option.jspmMates;\n            output += _.template(template)({\n                maps: JSON.stringify(maps, null, '    '),\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\n                paths: JSON.stringify(ctx.option.builder.config ? ctx.option.builder.config.paths : null, null, '    '),\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\n            });\n        }\n        let includes = option.includes || [];\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\n        return Promise.all(_.map(includes, f => {\n            return new Promise((resolve, reject) => {\n                fs_1.readFile(path.join(option.jspmConfig, f), 'utf8', (err, data) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(data);\n                    }\n                });\n            });\n        }))\n            .then(data => {\n            data.push(output);\n            let mainfile = option.mainfile; // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\n            // console.log('mainfile:', mainfile);\n            mkdirp.sync(path.dirname(mainfile));\n            var stream = source(mainfile);\n            stream.write(data.join('\\n'));\n            process.nextTick(() => {\n                stream.end();\n            });\n            return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes, option.mainfileOutput);\n        });\n    }\n    getBundleManifestPath(ctx) {\n        return this.getBundleDest(ctx, ctx.option.mainfile);\n    }\n    getBundleManifest(ctx) {\n        let data = {};\n        let mainfile = this.getBundleManifestPath(ctx);\n        console.log('try to load old bundle in path ', mainfile);\n        if (fs_1.existsSync(mainfile)) {\n            try {\n                let content = fs_1.readFileSync(mainfile, 'utf8');\n                let idx = content.indexOf(this.manifestSplit);\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\n                content = content.substring(idx);\n                // console.log(content);\n                fs_1.writeFileSync(mainfile, content);\n                data = require(mainfile);\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n            }\n            catch (e) {\n                console.log(chalk.red(e));\n            }\n        }\n        else {\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n        }\n        return data;\n    }\n    getBundleShortPath(config, bundleName, bundleGp) {\n        var fullPath = bundleGp ? this.getBundleDest(config, bundleName, bundleGp)\n            : path.join(config.getDist(), bundleName);\n        let spath = path.relative(config.option.baseURL, fullPath);\n        spath = spath.replace(/\\\\/g, '/').replace(/^\\//g, '');\n        return spath;\n    }\n    getBundleDest(config, bundleName, bundleGp) {\n        let dest = config.getDist();\n        if (bundleGp) {\n            let min = bundleGp.builder.minify;\n            let name = bundleGp.items[bundleName] || bundleName;\n            let file = name + ((min) ? '.min.js' : '.js');\n            if (bundleGp.combine) {\n                dest = path.join(dest, file);\n            }\n            else {\n                dest = path.join(dest, bundleName, file);\n            }\n        }\n        else {\n            dest = path.join(dest, bundleName);\n        }\n        return dest;\n    }\n};\nJspmBundle = __decorate([\n    development_core_1.task({\n        oper: development_core_1.Operation.release | development_core_1.Operation.deploy\n    }), \n    __metadata('design:paramtypes', [Object])\n], JspmBundle);\nexports.JspmBundle = JspmBundle;\n","import * as _ from 'lodash';\r\nimport { IMap, task, RunWay, IAssertDist, ITaskContext, Src, Pipe, OutputPipe, ITaskInfo, TransformSource, ITransform, Operation, PipeTask, bindingConfig } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IJspmTaskContext, IBundlesConfig, IBundleGroup, IBuidlerConfig, IBundleMap, IBundleTransform } from './config';\r\n\r\nimport { readFileSync, readFile, existsSync, writeFileSync, readdirSync } from 'fs';\r\nimport * as chalk from 'chalk';\r\nconst globby = require('globby');\r\nconst jspm = require('jspm');\r\nconst source = require('vinyl-source-stream');\r\nconst vinylBuffer = require('vinyl-buffer');\r\nconst chksum = require('checksum');\r\nconst mkdirp = require('mkdirp');\r\n// const uglify = require('gulp-uglify');\r\n\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class JspmBundle extends PipeTask {\r\n\r\n    name = 'jspm-bundle';\r\n    runWay = RunWay.sequence;\r\n    private bundleMaps: IBundleMap[];\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    protected getOption(config: ITaskContext): IAssertDist {\r\n        return config.option;\r\n    }\r\n\r\n    protected loadBuilder(ctx: ITaskContext): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        jspm.setPackagePath(path.dirname(option.packageFile));\r\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\r\n\r\n        return Promise.resolve(jsbuilder)\r\n            .then(builder => {\r\n                if (option.jspmConfig) {\r\n                    return builder.loadConfig(option.jspmConfig, undefined, true)\r\n                        .then(() => {\r\n                            return builder;\r\n                        });\r\n                } else {\r\n                    return builder;\r\n                }\r\n            });\r\n    }\r\n\r\n    private translate(trans: IBundleTransform | IBundleTransform[]): ITransform | ITransform[] {\r\n        if (_.isArray(trans)) {\r\n            return _.map(trans, t => {\r\n                t.stream['bundle'] = t.bundle;\r\n                return t.stream;\r\n            });\r\n        } else {\r\n            trans.stream['bundle'] = trans.bundle;\r\n            return trans.stream;\r\n        }\r\n    }\r\n\r\n    private bundleConfig: IMap<IBundleGroup>;\r\n    initBundles(ctx: IJspmTaskContext) {\r\n        let bundles: IMap<IBundleGroup> = null;\r\n        let opt = ctx.option;\r\n        if (_.isFunction(opt.bundles)) {\r\n            // opt['_bundlesFunc'] = opt.bundles;\r\n            bundles = opt.bundles(ctx);\r\n        }\r\n        if (opt.bundleDeps) {\r\n            let pkg = this.getPackage(opt);\r\n            if (!pkg) {\r\n                console.log(chalk.red('can not found package.json file.'));\r\n                process.exit(0);\r\n            }\r\n            if (!pkg.jspm) {\r\n                console.log(chalk.red('jspm not init in package.json file.'));\r\n                process.exit(0);\r\n            }\r\n            let deps = _.keys(pkg.jspm.dependencies);\r\n            if (opt.depsExclude) {\r\n                let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\r\n                deps = _.filter(deps, d => exclude.indexOf(d) < 0);\r\n            }\r\n\r\n            let bundleDeps;\r\n            if (_.isFunction(opt.bundleDeps)) {\r\n                // opt['_bundleDepsFunc'] = opt.bundleDeps;\r\n                bundleDeps = opt.bundleDeps(ctx, deps);\r\n            } else if (_.isBoolean(opt.bundleDeps)) {\r\n                opt.bundleDeps = {\r\n                    deplibs: {\r\n                        combine: true,\r\n                        items: deps\r\n                    }\r\n                };\r\n            } else {\r\n                bundleDeps = opt.bundleDeps;\r\n            }\r\n\r\n            let cores = _.keys(bundleDeps);\r\n            _.each(_.values(bundles), (b: IBundleGroup) => {\r\n                b.exclude = b.exclude || [];\r\n                b.exclude = cores.concat(b.exclude);\r\n            });\r\n        }\r\n        this.bundleConfig = bundles;\r\n\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (option.bundles) {\r\n            this.initBundles(<IJspmTaskContext>ctx);\r\n            return Promise.all(_.map(this.getBundles(ctx), name => {\r\n                return this.loadBuilder(ctx)\r\n                    .then(builder => {\r\n                        let bundle: IBundleGroup = this.bundleConfig[name];\r\n                        bundle.builder = <IBuidlerConfig>_.defaults(bundle.builder, option.builder);\r\n                        if (option.builder.config) {\r\n                            builder.config(bundle.builder.config);\r\n                        }\r\n                        return this.groupBundle(<IJspmTaskContext>ctx, builder, name, bundle, gulp)\r\n                            .then(trans => this.translate(trans));\r\n                    });\r\n            })).then(groups => {\r\n                return _.flatten(groups);\r\n            });\r\n        } else {\r\n            return this.loadBuilder(ctx)\r\n                .then(builder => {\r\n                    let src = ctx.getSrc(this.getInfo());\r\n                    console.log('start bundle all src : ', chalk.cyan(<any>src));\r\n                    if (option.builder.config) {\r\n                        builder.config(option.builder.config)\r\n                    }\r\n\r\n                    return Promise.resolve<string[]>(globby(src))\r\n                        .then(files => {\r\n                            files = this.getRelativeSrc(files, <IJspmTaskContext>ctx);\r\n                            console.log('bundle files:', chalk.cyan(<any>files));\r\n                            return this.createBundler(<IJspmTaskContext>ctx, builder, 'bundle', files.join(' + '), ctx.toRootPath(option.mainfile), option.builder)\r\n                                .then(trans => this.translate(trans));\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    private getRelativeSrc(src: Src, config: IJspmTaskContext, toModule = false): string[] {\r\n        // console.log(option.baseURL);\r\n        let baseURL = config.option.baseURL\r\n        if (_.isArray(src)) {\r\n            return _.map(src, s => {\r\n                let filename = path.relative(baseURL, s).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n                return toModule ? this.toModulePath(filename) : filename;\r\n            });\r\n        } else {\r\n            let fn = path.relative(baseURL, src).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n            return [(toModule ? this.toModulePath(fn) : fn)];\r\n        }\r\n    }\r\n\r\n    private toModulePath(filename: string): string {\r\n        if (!filename) {\r\n            return '';\r\n        }\r\n        return filename.substring(0, filename.length - path.extname(filename).length);\r\n    }\r\n\r\n    private initOption(ctx: ITaskContext) {\r\n        let option = <IBundlesConfig>_.extend(<IBundlesConfig>{\r\n            baseURL: '',\r\n            mainfile: 'bundle.js',\r\n            jspmConfig: '',\r\n            packageFile: 'package.json',\r\n            dest: '',\r\n            file: '',\r\n            systemConfigTempl: '',\r\n            relationToRoot: '',\r\n            bust: '',\r\n            bundles: null,\r\n            includePackageFiles: [\r\n                'system-polyfills.src.js',\r\n                'system.src.js'\r\n            ],\r\n            jspmMates: {\r\n                '*.css': {\r\n                    loader: 'css'\r\n                },\r\n                '*.json': {\r\n                    loader: 'json'\r\n                },\r\n                '*.jsx': {\r\n                    loader: 'jsx'\r\n                }\r\n            },\r\n            builder: {\r\n                sfx: false,\r\n                minify: false,\r\n                mangle: false,\r\n                sourceMaps: false,\r\n                separateCSS: false,\r\n                lowResSourceMaps: true\r\n            }\r\n        }, <IBundlesConfig>ctx.option);\r\n\r\n        option.baseURL = ctx.toRootPath(option.baseURL);\r\n        if (option.jspmConfig) {\r\n            option.jspmConfig = ctx.toRootPath(option.jspmConfig);\r\n        }\r\n        option.packageFile = ctx.toRootPath(option.packageFile);\r\n\r\n        let pkg = this.getPackage(option);\r\n        if (!option.jspmPackages) {\r\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\r\n                option.jspmPackages = <string>pkg.jspm.directories.packages;\r\n            } else {\r\n                option.jspmPackages = 'jspm_packages';\r\n            }\r\n        }\r\n        option.jspmPackages = ctx.toRootPath(option.jspmPackages);\r\n\r\n        if (!readdirSync(option.jspmPackages)) {\r\n            console.log(chalk.red('jspm project config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        return option;\r\n    }\r\n\r\n\r\n    execute(context: ITaskContext, gulp: Gulp) {\r\n        this.bundleMaps = [];\r\n        let ctx = <IJspmTaskContext>context;\r\n        return super.execute(ctx, gulp)\r\n            .then(() => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                if (option.bundles) {\r\n                    return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\r\n                        return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\r\n                    });\r\n                } else {\r\n                    return null;\r\n                }\r\n            }).then(manifest => {\r\n                if (manifest) {\r\n                    return this.writeBundleManifest(ctx, manifest, gulp)\r\n                        .then(() => {\r\n                            console.log(chalk.green('------ Complete -------------'));\r\n                        });\r\n                } else {\r\n                    console.log(chalk.green('------ Complete -------------'));\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        ctx.option = this.initOption(ctx);\r\n        return super.setup(ctx, gulp);\r\n    }\r\n\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        let bundle = <IBundleMap>source['bundle'];\r\n        return super.working(source, ctx, option, gulp, pipes, output)\r\n            .then(() => {\r\n                let bundlemap: IBundleMap = {\r\n                    path: bundle.path,\r\n                    modules: bundle.modules\r\n                };\r\n                this.bundleMaps.push(bundlemap);\r\n                if (bundle.sfx) {\r\n                    console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                } else {\r\n                    console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                }\r\n                return;\r\n            });\r\n    }\r\n\r\n    getBundles(ctx: ITaskContext) {\r\n\r\n        let groups = [];\r\n        if (ctx.env.gb) {\r\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\r\n        }\r\n\r\n        if (groups.length < 1) {\r\n            groups = _.keys(this.bundleConfig);\r\n        } else {\r\n            groups = _.filter(groups, f => f && groups[f]);\r\n        }\r\n        console.log('cmmand group bundle:', chalk.cyan(<any>groups));\r\n        return groups;\r\n    }\r\n\r\n    protected groupBundle(config: IJspmTaskContext, builder, name: string, bundleGp: IBundleGroup, gulp: Gulp): Promise<IBundleTransform | IBundleTransform[]> {\r\n\r\n        let bundleStr = '';\r\n        let bundleDest = '';\r\n\r\n        let bundleItems: string[] = [];\r\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\r\n\r\n        if (bundleGp.items) {\r\n            bundleItems = _.isArray(bundleItems) ? <string[]>bundleGp.items : _.keys(bundleGp.items);\r\n        }\r\n\r\n        if (bundleGp.combine) {\r\n            bundleDest = this.getBundleDest(config, name, bundleGp);\r\n            bundleStr = bundleItems.join(' + ') + minusStr;\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\r\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n\r\n        } else {\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(<any>bundleItems)}\\n-------------------------------`);\r\n            return Promise.all(bundleItems.map(key => {\r\n                bundleStr = key + minusStr;\r\n                bundleDest = this.getBundleDest(config, key, bundleGp);\r\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n            }));\r\n        }\r\n    }\r\n\r\n    private exclusionString(exclude, groups): string {\r\n        let str = this.exclusionArray(exclude, groups).join(' - ');\r\n        return (str) ? ' - ' + str : '';\r\n    }\r\n\r\n    private exclusionArray(exclude, groups): string[] {\r\n        let minus: string[] = [];\r\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\r\n        _.forEach(exclude, (item: string) => {\r\n            var group = groups[item];\r\n            if (group) {\r\n                // exclude everything from this group\r\n                minus = minus.concat(this.exclusionArray(group.items, groups));\r\n            } else {\r\n                // exclude this item by name\r\n                minus.push(item);\r\n            }\r\n        });\r\n        return minus;\r\n    }\r\n\r\n    private createBundler(config: IJspmTaskContext, builder: any, bundleName: string, bundleStr: string, bundleDest: string, builderCfg: IBuidlerConfig, bundleGp?: IBundleGroup): Promise<IBundleTransform> {\r\n\r\n        let sfx = builderCfg.sfx;\r\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\r\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\r\n        let filename = path.parse(bundleDest).base;\r\n\r\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\r\n            .then(output => {\r\n                mkdirp.sync(path.dirname(bundleDest));\r\n                var stream: ITransform = source(filename);\r\n                stream.write(output.source);\r\n                process.nextTick(function () {\r\n                    stream.end();\r\n                });\r\n\r\n\r\n                // transform['bundle'] = {\r\n                //     sfx: sfx,\r\n                //     path: shortPath,\r\n                //     bundleName: bundleName,\r\n                //     filename: filename,\r\n                //     bundleDest: bundleDest,\r\n                //     modules: output.modules\r\n                // };\r\n                return {\r\n                    stream: stream.pipe(vinylBuffer()),\r\n                    bundle: {\r\n                        path: shortPath,\r\n                        sfx: sfx,\r\n                        bundleName: bundleName,\r\n                        filename: filename,\r\n                        bundleDest: bundleDest,\r\n                        modules: output.modules\r\n                    }\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    private packages = {};\r\n    public getPackage(option: IBundlesConfig): any {\r\n        if (!this.packages[option.packageFile]) {\r\n            this.packages[option.packageFile] = require(option.packageFile);\r\n        }\r\n        return this.packages[option.packageFile]\r\n    }\r\n\r\n    private calcChecksums(option: IBundlesConfig, bundles: any[]): Promise<any> {\r\n        let chksums = {};\r\n\r\n        console.log('Calculating checksums...');\r\n\r\n        return Promise.all(_.map(bundles, (bundle: any) => {\r\n            if (!_.isObject(bundle)) {\r\n                return null;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let filepath = path.join(option.baseURL || '.', bundle.path);\r\n                let filename = path.parse(bundle.path).base;\r\n                chksum.file(filepath, (err, sum) => {\r\n                    if (err) {\r\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\r\n                    }\r\n                    console.log(filename, chalk.cyan(sum));\r\n                    chksums[bundle.path] = sum;\r\n                    resolve(chksums);\r\n                });\r\n            });\r\n\r\n        })).then(() => {\r\n            return chksums;\r\n        });\r\n    }\r\n\r\n    protected updateBundleManifest(ctx: IJspmTaskContext, bundles: any[], chksums?: any) {\r\n\r\n        chksums = chksums || {};\r\n\r\n        var manifest: any = _.defaults(this.getBundleManifest(ctx), {\r\n            bundles: {},\r\n            chksums: {}\r\n        });\r\n\r\n        // console.log(manifest);\r\n\r\n        _.each(bundles, bundle => {\r\n            if (bundle.path) {\r\n                manifest.bundles[bundle.path] = bundle.modules;\r\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\r\n            }\r\n        });\r\n\r\n        return manifest;\r\n\r\n    }\r\n\r\n    private manifestSplit = `/*------bundles infos------*/`;\r\n    private writeBundleManifest(ctx: IJspmTaskContext, manifest, gulp: Gulp): Promise<any> {\r\n        let option = ctx.option;\r\n        if (!option.mainfile) {\r\n            return Promise.reject('mainfile not configed.');\r\n        }\r\n\r\n\r\n        console.log('Writing manifest...');\r\n\r\n\r\n        let output = `\r\nSystem.config({\r\n    baseURL: '${ path.relative(option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\r\n        let template = '';\r\n\r\n        if (manifest) {\r\n            // try {\r\n            template = option.systemConfigTempl;\r\n\r\n            if (!template) {\r\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\r\n            }\r\n\r\n\r\n            let maps = {\r\n                css: 'github:systemjs/plugin-css@0.1.20.js',\r\n                json: 'github:systemjs/plugin-json@0.1.2.js'\r\n            };\r\n\r\n            _.each(_.keys(manifest.bundles), n => {\r\n                if (/css.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n                if (/json.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n            });\r\n\r\n            let jspmMetas = option.jspmMates;\r\n            output += _.template(template)({\r\n                maps: JSON.stringify(maps, null, '    '),\r\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\r\n                paths: JSON.stringify(ctx.option.builder.config ? ctx.option.builder.config.paths : null, null, '    '),\r\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\r\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let includes = option.includes || [];\r\n\r\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\r\n\r\n        return Promise.all(_.map(includes, f => {\r\n            return new Promise<string>((resolve, reject) => {\r\n                readFile(path.join(option.jspmConfig, f), 'utf8', (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            });\r\n        }))\r\n            .then(data => {\r\n                data.push(output);\r\n                let mainfile = option.mainfile; // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\r\n                // console.log('mainfile:', mainfile);\r\n                mkdirp.sync(path.dirname(mainfile));\r\n                var stream = <NodeJS.ReadWriteStream>source(mainfile);\r\n                stream.write(data.join('\\n'));\r\n                process.nextTick(() => {\r\n                    stream.end();\r\n                });\r\n\r\n                return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes, option.mainfileOutput);\r\n            });\r\n\r\n    }\r\n\r\n    private getBundleManifestPath(ctx: IJspmTaskContext): string {\r\n        return this.getBundleDest(ctx, ctx.option.mainfile);\r\n    }\r\n    private getBundleManifest(ctx: IJspmTaskContext): any {\r\n        let data: any = {};\r\n        let mainfile: string = this.getBundleManifestPath(ctx);\r\n        console.log('try to load old bundle in path ', mainfile);\r\n        if (existsSync(mainfile)) {\r\n            try {\r\n                let content = readFileSync(mainfile, 'utf8');\r\n                let idx = content.indexOf(this.manifestSplit);\r\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\r\n                content = content.substring(idx);\r\n                // console.log(content);\r\n                writeFileSync(mainfile, content);\r\n                data = require(mainfile);\r\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n            } catch (e) {\r\n                console.log(chalk.red(e));\r\n            }\r\n        } else {\r\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private getBundleShortPath(config: IJspmTaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n        var fullPath = bundleGp ? this.getBundleDest(config, bundleName, bundleGp)\r\n            : path.join(config.getDist(), bundleName);\r\n\r\n        let spath: string = path.relative(config.option.baseURL, fullPath);\r\n        spath = spath.replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n        return spath;\r\n    }\r\n\r\n    private getBundleDest(config: IJspmTaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n\r\n        let dest = config.getDist();\r\n        if (bundleGp) {\r\n            let min = bundleGp.builder.minify;\r\n            let name = bundleGp.items[bundleName] || bundleName;\r\n            let file = name + ((min) ? '.min.js' : '.js');\r\n\r\n            if (bundleGp.combine) {\r\n                dest = path.join(dest, file);\r\n            } else {\r\n                dest = path.join(dest, bundleName, file);\r\n            }\r\n        } else {\r\n            dest = path.join(dest, bundleName);\r\n        }\r\n\r\n        return dest;\r\n    }\r\n}\r\n"]}