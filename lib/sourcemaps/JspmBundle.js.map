{"version":3,"sources":["JspmBundle.js","JspmBundle.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","path","fs_1","chalk","jspm","source","vinylBuffer","chksum","mkdirp","JspmBundle","info","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","name","runWay","RunWay","sequence","packages","manifestSplit","_inherits","_development_core_1$P","_createClass","value","config","option","ctx","setPackagePath","dirname","toStr","packageFile","jsbuilder","Builder","separateCSS","builder","Promise","resolve","then","jspmConfig","loadConfig","undefined","trans","isArray","map","t","stream","bundle","_this2","opt","pr","isFunction","bundles","bundleDeps","pkg","getPackage","console","log","red","process","exit","deps","keys","dependencies","depsExclude","exclude","filter","indexOf","isBoolean","deplibs","combine","items","cores","each","values","b","concat","bundleConfig","dist","gulp","_this3","initBundles","all","getBundles","loadBuilder","defaults","groupBundle","translate","groups","flatten","src","getSrc","getInfo","cyan","fileFilter","files","getRelativeSrc","mainfile","getBundleManifestPath","createBundler","join","_this4","toModule","baseURL","bundleBaseURL","s","filename","relative","replace","toModulePath","fn","substring","extname","extend","dest","file","systemConfigTempl","relationToRoot","bust","bundlePaths","paths","bundleDest","getDist","rootpath","dir","readdirSync","sf","f","lstatSync","isDirectory","p","env","root","jpk","jspmPackages","jp","basename","includePackageFiles","jspmMates","*.css","loader","*.json","*.jsx","sfx","minify","mangle","sourceMaps","lowResSourceMaps","toRootPath","directories","rootURL","context","_this5","bundleMaps","_get","prototype","calcChecksums","checksums","updateBundleManifest","manifest","writeBundleManifest","green","initOption","pipes","output","_this6","bundlemap","modules","push","bundleName","gb","uniq","split","bundleGp","_this7","bundleStr","bundleItems","minusStr","exclusionString","getBundleDest","str","exclusionArray","_this8","minus","forEach","item","group","builderCfg","bundler","buildStatic","shortPath","getBundleShortPath","parse","base","bind","sync","write","nextTick","end","pipe","chksums","isObject","reject","filepath","err","sum","error","getBundleManifest","_this9","template","maps","css","json","n","test","first","jspmMetas","JSON","stringify","jspmMeta","includes","readFile","data","mainfilePipes","mainfileOutput","existsSync","content","readFileSync","idx","writeFileSync","e","fullPath","spath","min","PipeTask","task","oper","Operation","release","deploy","exports"],"mappings":"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","file":"../JspmBundle.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst path = require('path');\nconst fs_1 = require('fs');\nconst chalk = require('chalk');\n// const globby = require('globby');\nconst jspm = require('jspm');\nconst source = require('vinyl-source-stream');\nconst vinylBuffer = require('vinyl-buffer');\nconst chksum = require('checksum');\nconst mkdirp = require('mkdirp');\n// const uglify = require('gulp-uglify');\nlet JspmBundle = class JspmBundle extends development_core_1.PipeTask {\n    constructor(info) {\n        super(info);\n        this.name = 'jspm-bundle';\n        this.runWay = development_core_1.RunWay.sequence;\n        this.packages = {};\n        this.manifestSplit = `/*------bundles infos------*/`;\n    }\n    getOption(config) {\n        return config.option;\n    }\n    loadBuilder(ctx) {\n        let option = ctx.option;\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\n        return Promise.resolve(jsbuilder)\n            .then(builder => {\n            if (option.jspmConfig) {\n                return builder.loadConfig(option.jspmConfig, undefined, true)\n                    .then(() => {\n                    return builder;\n                });\n            }\n            else {\n                return builder;\n            }\n        });\n    }\n    translate(trans) {\n        if (_.isArray(trans)) {\n            return _.map(trans, t => {\n                t.stream['bundle'] = t.bundle;\n                return t.stream;\n            });\n        }\n        else {\n            trans.stream['bundle'] = trans.bundle;\n            return trans.stream;\n        }\n    }\n    initBundles(ctx) {\n        let opt = ctx.option;\n        let pr = Promise.resolve(null)\n            .then(() => {\n            if (_.isFunction(opt.bundles)) {\n                // opt['_bundlesFunc'] = opt.bundles;\n                return opt.bundles(ctx);\n            }\n            else {\n                return opt.bundles;\n            }\n        });\n        if (opt.bundleDeps) {\n            pr = pr.then(bundles => {\n                let pkg = this.getPackage(opt);\n                if (!pkg) {\n                    console.log(chalk.red('can not found package.json file.'));\n                    process.exit(0);\n                }\n                if (!pkg.jspm) {\n                    console.log(chalk.red('jspm not init in package.json file.'));\n                    process.exit(0);\n                }\n                let deps = _.keys(pkg.jspm.dependencies);\n                if (opt.depsExclude) {\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\n                }\n                return Promise.resolve()\n                    .then(() => {\n                    if (_.isFunction(opt.bundleDeps)) {\n                        // opt['_bundleDepsFunc'] = opt.bundleDeps;\n                        return opt.bundleDeps(ctx, deps);\n                    }\n                    else if (_.isBoolean(opt.bundleDeps)) {\n                        return {\n                            deplibs: {\n                                combine: true,\n                                items: deps\n                            }\n                        };\n                    }\n                    else {\n                        return opt.bundleDeps;\n                    }\n                })\n                    .then(bundleDeps => {\n                    let cores = _.keys(bundleDeps);\n                    _.each(_.values(bundles), (b) => {\n                        b.exclude = b.exclude || [];\n                        b.exclude = cores.concat(b.exclude);\n                    });\n                    return bundles;\n                });\n            });\n        }\n        return pr.then(bundles => {\n            this.bundleConfig = bundles;\n            return bundles;\n        });\n    }\n    source(ctx, dist, gulp) {\n        let option = ctx.option;\n        if (option.bundles) {\n            return this.initBundles(ctx)\n                .then(() => {\n                return Promise.all(_.map(this.getBundles(ctx), name => {\n                    return this.loadBuilder(ctx)\n                        .then(builder => {\n                        let bundle = this.bundleConfig[name];\n                        bundle.builder = _.defaults(bundle.builder, option.builder);\n                        if (option.builder.config) {\n                            builder.config(bundle.builder.config);\n                        }\n                        return this.groupBundle(ctx, builder, name, bundle, gulp)\n                            .then(trans => this.translate(trans));\n                    });\n                }));\n            }).then(groups => {\n                return _.flatten(groups);\n            });\n        }\n        else {\n            return this.loadBuilder(ctx)\n                .then(builder => {\n                let src = ctx.getSrc(this.getInfo());\n                console.log('start bundle all src : ', chalk.cyan(src));\n                if (option.builder.config) {\n                    builder.config(option.builder.config);\n                }\n                return ctx.fileFilter(src)\n                    .then(files => {\n                    files = this.getRelativeSrc(ctx, files, ctx);\n                    console.log('bundle files:', chalk.cyan(files));\n                    let mainfile = this.getBundleManifestPath(ctx);\n                    return this.createBundler(ctx, builder, 'bundle', files.join(' + '), mainfile, option.builder)\n                        .then(trans => this.translate(trans));\n                });\n            });\n        }\n    }\n    getRelativeSrc(ctx, src, config, toModule = false) {\n        // console.log(option.baseURL);\n        let baseURL = config.option.bundleBaseURL;\n        if (_.isArray(src)) {\n            return _.map(src, s => {\n                let filename = path.relative(baseURL, s).replace(/\\\\/g, '/').replace(/^\\//g, '');\n                return toModule ? this.toModulePath(filename) : filename;\n            });\n        }\n        else {\n            let fn = path.relative(baseURL, src).replace(/\\\\/g, '/').replace(/^\\//g, '');\n            return [(toModule ? this.toModulePath(fn) : fn)];\n        }\n    }\n    toModulePath(filename) {\n        if (!filename) {\n            return '';\n        }\n        return filename.substring(0, filename.length - path.extname(filename).length);\n    }\n    initOption(ctx) {\n        let self = this;\n        let option = _.extend({\n            baseURL: '',\n            bundleBaseURL: '.',\n            mainfile: 'bundle.js',\n            jspmConfig: '',\n            packageFile: 'package.json',\n            dest: '',\n            file: '',\n            systemConfigTempl: '',\n            relationToRoot: '',\n            bust: '',\n            bundles: null,\n            bundlePaths(ctx) {\n                let paths = {};\n                let bundleDest = ctx.getDist();\n                let rootpath = ctx.option.bundleBaseURL;\n                let dir = fs_1.readdirSync(rootpath);\n                _.each(dir, (d) => {\n                    let sf = path.join(rootpath, d);\n                    if (sf === bundleDest) {\n                        return;\n                    }\n                    let f = fs_1.lstatSync(sf);\n                    if (f.isDirectory()) {\n                        let p = d + '/*';\n                        paths[p] = path.relative(ctx.env.root, path.join(rootpath, p)).replace(/\\\\/g, '/').replace(/^\\//g, '');\n                    }\n                });\n                let jpk = option.jspmPackages;\n                let jp = path.basename(jpk) + '/*';\n                paths[jp] = path.relative(ctx.env.root, path.join(jpk, jp)).replace(/\\\\/g, '/').replace(/^\\//g, '');\n                return paths;\n            },\n            includePackageFiles: [\n                'system-polyfills.src.js',\n                'system.src.js'\n            ],\n            jspmMates: {\n                '*.css': {\n                    loader: 'css'\n                },\n                '*.json': {\n                    loader: 'json'\n                },\n                '*.jsx': {\n                    loader: 'jsx'\n                }\n            },\n            builder: {\n                sfx: false,\n                minify: false,\n                mangle: false,\n                sourceMaps: false,\n                separateCSS: false,\n                lowResSourceMaps: true\n            }\n        }, ctx.option);\n        ctx.option = option;\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\n        option.bundleBaseURL = ctx.toRootPath(ctx.toStr(option.bundleBaseURL));\n        if (option.jspmConfig) {\n            option.jspmConfig = ctx.toRootPath(ctx.toStr(option.jspmConfig));\n        }\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\n        option.mainfile = ctx.toStr(option.mainfile);\n        let pkg = this.getPackage(option);\n        if (!option.jspmPackages) {\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\n                option.jspmPackages = pkg.jspm.directories.packages;\n            }\n            else {\n                option.jspmPackages = 'jspm_packages';\n            }\n        }\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\n        if (!fs_1.readdirSync(option.jspmPackages)) {\n            console.log(chalk.red('jspm project config error!'));\n            process.exit(0);\n        }\n        option.builder.config = _.extend(option.builder.config || {}, {\n            paths: _.isFunction(option.bundlePaths) ? option.bundlePaths(ctx) : (option.bundlePaths || {}),\n            rootURL: option.bundleBaseURL\n        });\n        return option;\n    }\n    execute(context, gulp) {\n        this.bundleMaps = [];\n        let ctx = context;\n        return super.execute(ctx, gulp)\n            .then(() => {\n            let option = ctx.option;\n            if (option.bundles) {\n                return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\n                    return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\n                });\n            }\n            else {\n                return null;\n            }\n        }).then(manifest => {\n            if (manifest) {\n                return this.writeBundleManifest(ctx, manifest, gulp)\n                    .then(() => {\n                    console.log(chalk.green('------ Complete -------------'));\n                });\n            }\n            else {\n                console.log(chalk.green('------ Complete -------------'));\n                return null;\n            }\n        });\n    }\n    setup(ctx, gulp) {\n        ctx.option = this.initOption(ctx);\n        return super.setup(ctx, gulp);\n    }\n    working(source, ctx, option, gulp, pipes, output) {\n        let bundle = source['bundle'];\n        return super.working(source, ctx, option, gulp, pipes, output)\n            .then(() => {\n            let bundlemap = {\n                path: bundle.path,\n                modules: bundle.modules\n            };\n            this.bundleMaps.push(bundlemap);\n            if (bundle.sfx) {\n                console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            else {\n                console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\n            }\n            return;\n        });\n    }\n    getBundles(ctx) {\n        let groups = [];\n        if (ctx.env.gb) {\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\n        }\n        if (groups.length < 1) {\n            groups = _.keys(this.bundleConfig);\n        }\n        else {\n            groups = _.filter(groups, f => f && groups[f]);\n        }\n        console.log('cmmand group bundle:', chalk.cyan(groups));\n        return groups;\n    }\n    groupBundle(config, builder, name, bundleGp, gulp) {\n        let bundleStr = '';\n        let bundleDest = '';\n        let bundleItems = [];\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\n        if (bundleGp.items) {\n            bundleItems = _.isArray(bundleItems) ? bundleGp.items : _.keys(bundleGp.items);\n        }\n        if (bundleGp.combine) {\n            bundleDest = this.getBundleDest(config, name, bundleGp);\n            bundleStr = bundleItems.join(' + ') + minusStr;\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n        }\n        else {\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(bundleItems)}\\n-------------------------------`);\n            return Promise.all(bundleItems.map(key => {\n                bundleStr = key + minusStr;\n                bundleDest = this.getBundleDest(config, key, bundleGp);\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\n            }));\n        }\n    }\n    exclusionString(exclude, groups) {\n        let str = this.exclusionArray(exclude, groups).join(' - ');\n        return (str) ? ' - ' + str : '';\n    }\n    exclusionArray(exclude, groups) {\n        let minus = [];\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\n        _.forEach(exclude, (item) => {\n            var group = groups[item];\n            if (group) {\n                // exclude everything from this group\n                minus = minus.concat(this.exclusionArray(group.items, groups));\n            }\n            else {\n                // exclude this item by name\n                minus.push(item);\n            }\n        });\n        return minus;\n    }\n    createBundler(config, builder, bundleName, bundleStr, bundleDest, builderCfg, bundleGp) {\n        let sfx = builderCfg.sfx;\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\n        let filename = path.parse(bundleDest).base;\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\n            .then(output => {\n            mkdirp.sync(path.dirname(bundleDest));\n            var stream = source(filename);\n            stream.write(output.source);\n            process.nextTick(function () {\n                stream.end();\n            });\n            return {\n                stream: stream.pipe(vinylBuffer()),\n                bundle: {\n                    path: shortPath,\n                    sfx: sfx,\n                    bundleName: bundleName,\n                    filename: filename,\n                    bundleDest: bundleDest,\n                    modules: output.modules\n                }\n            };\n        });\n    }\n    getPackage(option) {\n        if (!this.packages[option.packageFile]) {\n            this.packages[option.packageFile] = require(option.packageFile);\n        }\n        return this.packages[option.packageFile];\n    }\n    calcChecksums(option, bundles) {\n        let chksums = {};\n        console.log('Calculating checksums...');\n        return Promise.all(_.map(bundles, (bundle) => {\n            if (!_.isObject(bundle)) {\n                return null;\n            }\n            return new Promise((resolve, reject) => {\n                let filepath = path.join(option.bundleBaseURL || '.', bundle.path);\n                let filename = path.parse(bundle.path).base;\n                chksum.file(filepath, (err, sum) => {\n                    if (err) {\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\n                    }\n                    console.log(filename, chalk.cyan(sum));\n                    chksums[bundle.path] = sum;\n                    resolve(chksums);\n                });\n            });\n        })).then(() => {\n            return chksums;\n        });\n    }\n    updateBundleManifest(ctx, bundles, chksums) {\n        chksums = chksums || {};\n        var manifest = _.defaults(this.getBundleManifest(ctx), {\n            bundles: {},\n            chksums: {}\n        });\n        // console.log(manifest);\n        _.each(bundles, bundle => {\n            if (bundle.path) {\n                manifest.bundles[bundle.path] = bundle.modules;\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\n            }\n        });\n        return manifest;\n    }\n    writeBundleManifest(ctx, manifest, gulp) {\n        let option = ctx.option;\n        if (!option.mainfile) {\n            return Promise.reject('mainfile not configed.');\n        }\n        console.log('Writing manifest...');\n        let output = `\r\nSystem.config({\r\n    baseURL: '${path.relative(option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\n        let template = '';\n        if (manifest) {\n            // try {\n            template = ctx.toStr(option.systemConfigTempl);\n            if (!template) {\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\n            }\n            let maps = {\n                css: 'github:systemjs/plugin-css@0.1.20.js',\n                json: 'github:systemjs/plugin-json@0.1.2.js'\n            };\n            _.each(_.keys(manifest.bundles), n => {\n                if (/css.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n                if (/json.min.js$/.test(n)) {\n                    maps.css = _.first(manifest.bundles[n]);\n                }\n            });\n            let jspmMetas = option.jspmMates;\n            output += _.template(template)({\n                maps: JSON.stringify(maps, null, '    '),\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\n                paths: JSON.stringify(ctx.option.builder.config ? ctx.option.builder.config.paths : null, null, '    '),\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\n            });\n        }\n        let includes = option.includes || [];\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\n        return Promise.all(_.map(includes, f => {\n            return new Promise((resolve, reject) => {\n                fs_1.readFile(path.join(option.jspmConfig, f), 'utf8', (err, data) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(data);\n                    }\n                });\n            });\n        }))\n            .then(data => {\n            data.push(output);\n            let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\n            console.log('mainfile:', mainfile);\n            mkdirp.sync(path.dirname(mainfile));\n            var stream = source(mainfile);\n            stream.write(data.join('\\n'));\n            process.nextTick(() => {\n                stream.end();\n            });\n            return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\n        });\n    }\n    getBundleManifestPath(ctx) {\n        return this.getBundleDest(ctx, ctx.option.mainfile);\n    }\n    getBundleManifest(ctx) {\n        let data = {};\n        let mainfile = this.getBundleManifestPath(ctx);\n        console.log('try to load old bundle in path ', mainfile);\n        if (fs_1.existsSync(mainfile)) {\n            try {\n                let content = fs_1.readFileSync(mainfile, 'utf8');\n                let idx = content.indexOf(this.manifestSplit);\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\n                content = content.substring(idx);\n                // console.log(content);\n                fs_1.writeFileSync(mainfile, content);\n                data = require(mainfile);\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n            }\n            catch (e) {\n                console.log(chalk.red(e));\n            }\n        }\n        else {\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\n        }\n        return data;\n    }\n    getBundleShortPath(ctx, bundleName, bundleGp) {\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\n            : path.join(ctx.getDist(), bundleName);\n        let spath = path.relative(ctx.option.bundleBaseURL, fullPath);\n        spath = spath.replace(/\\\\/g, '/').replace(/^\\//g, '');\n        return spath;\n    }\n    getBundleDest(ctx, bundleName, bundleGp) {\n        let dest = ctx.getDist();\n        if (bundleGp) {\n            let min = bundleGp.builder.minify;\n            let name = bundleGp.items[bundleName] || bundleName;\n            let file = name + ((min) ? '.min.js' : '.js');\n            if (bundleGp.combine) {\n                dest = path.join(dest, file);\n            }\n            else {\n                dest = path.join(dest, bundleName, file);\n            }\n        }\n        else {\n            dest = path.join(dest, bundleName);\n        }\n        return dest;\n    }\n};\nJspmBundle = __decorate([\n    development_core_1.task({\n        oper: development_core_1.Operation.release | development_core_1.Operation.deploy\n    }), \n    __metadata('design:paramtypes', [Object])\n], JspmBundle);\nexports.JspmBundle = JspmBundle;\n","import * as _ from 'lodash';\r\nimport { IMap, task, RunWay, IAssertDist, ITaskContext, Src, Pipe, OutputPipe, ITaskInfo, TransformSource, ITransform, Operation, PipeTask, bindingConfig } from 'development-core';\r\nimport { Gulp } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IJspmTaskContext, IBundlesConfig, IBundleGroup, IBuidlerConfig, IBundleMap, IBundleTransform } from './config';\r\n\r\nimport { readFileSync, readFile, existsSync, lstatSync, writeFileSync, readdirSync } from 'fs';\r\nimport * as chalk from 'chalk';\r\n// const globby = require('globby');\r\nconst jspm = require('jspm');\r\nconst source = require('vinyl-source-stream');\r\nconst vinylBuffer = require('vinyl-buffer');\r\nconst chksum = require('checksum');\r\nconst mkdirp = require('mkdirp');\r\n// const uglify = require('gulp-uglify');\r\n\r\n\r\n@task({\r\n    oper: Operation.release | Operation.deploy\r\n})\r\nexport class JspmBundle extends PipeTask {\r\n\r\n    name = 'jspm-bundle';\r\n    runWay = RunWay.sequence;\r\n    private bundleMaps: IBundleMap[];\r\n    constructor(info?: ITaskInfo) {\r\n        super(info);\r\n    }\r\n\r\n    protected getOption(config: ITaskContext): IAssertDist {\r\n        return config.option;\r\n    }\r\n\r\n    protected loadBuilder(ctx: ITaskContext): Promise<any> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        jspm.setPackagePath(path.dirname(ctx.toStr(option.packageFile)));\r\n        let jsbuilder = new jspm.Builder({ separateCSS: option.builder.separateCSS });\r\n\r\n        return Promise.resolve(jsbuilder)\r\n            .then(builder => {\r\n                if (option.jspmConfig) {\r\n                    return builder.loadConfig(option.jspmConfig, undefined, true)\r\n                        .then(() => {\r\n                            return builder;\r\n                        });\r\n                } else {\r\n                    return builder;\r\n                }\r\n            });\r\n    }\r\n\r\n    private translate(trans: IBundleTransform | IBundleTransform[]): ITransform | ITransform[] {\r\n        if (_.isArray(trans)) {\r\n            return _.map(trans, t => {\r\n                t.stream['bundle'] = t.bundle;\r\n                return t.stream;\r\n            });\r\n        } else {\r\n            trans.stream['bundle'] = trans.bundle;\r\n            return trans.stream;\r\n        }\r\n    }\r\n\r\n    private bundleConfig: IMap<IBundleGroup>;\r\n    initBundles(ctx: IJspmTaskContext): Promise<IMap<IBundleGroup>> {\r\n        let opt = ctx.option;\r\n        let pr = Promise.resolve<IMap<IBundleGroup>>(null)\r\n            .then(() => {\r\n                if (_.isFunction(opt.bundles)) {\r\n                    // opt['_bundlesFunc'] = opt.bundles;\r\n                    return opt.bundles(ctx);\r\n                } else {\r\n                    return opt.bundles;\r\n                }\r\n            });\r\n\r\n        if (opt.bundleDeps) {\r\n            pr = pr.then(bundles => {\r\n                let pkg = this.getPackage(opt);\r\n                if (!pkg) {\r\n                    console.log(chalk.red('can not found package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                if (!pkg.jspm) {\r\n                    console.log(chalk.red('jspm not init in package.json file.'));\r\n                    process.exit(0);\r\n                }\r\n                let deps = _.keys(pkg.jspm.dependencies);\r\n                if (opt.depsExclude) {\r\n                    let exclude = _.isFunction(opt.depsExclude) ? opt.depsExclude(ctx, deps) : opt.depsExclude;\r\n                    deps = _.filter(deps, d => exclude.indexOf(d) < 0);\r\n                }\r\n\r\n                return Promise.resolve()\r\n                    .then(() => {\r\n                        if (_.isFunction(opt.bundleDeps)) {\r\n                            // opt['_bundleDepsFunc'] = opt.bundleDeps;\r\n                            return opt.bundleDeps(ctx, deps);\r\n                        } else if (_.isBoolean(opt.bundleDeps)) {\r\n                            return {\r\n                                deplibs: {\r\n                                    combine: true,\r\n                                    items: deps\r\n                                }\r\n                            };\r\n                        } else {\r\n                            return opt.bundleDeps;\r\n                        }\r\n                    })\r\n                    .then(bundleDeps => {\r\n\r\n                        let cores = _.keys(bundleDeps);\r\n                        _.each(_.values(bundles), (b: IBundleGroup) => {\r\n                            b.exclude = b.exclude || [];\r\n                            b.exclude = cores.concat(b.exclude);\r\n                        });\r\n\r\n                        return bundles;\r\n                    });\r\n            });\r\n        }\r\n\r\n        return pr.then(bundles => {\r\n            this.bundleConfig = bundles;\r\n            return bundles;\r\n        });\r\n\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = <IBundlesConfig>ctx.option;\r\n        if (option.bundles) {\r\n            return this.initBundles(<IJspmTaskContext>ctx)\r\n                .then(() => {\r\n                    return Promise.all(_.map(this.getBundles(ctx), name => {\r\n                        return this.loadBuilder(ctx)\r\n                            .then(builder => {\r\n                                let bundle: IBundleGroup = this.bundleConfig[name];\r\n                                bundle.builder = <IBuidlerConfig>_.defaults(bundle.builder, option.builder);\r\n                                if (option.builder.config) {\r\n                                    builder.config(bundle.builder.config);\r\n                                }\r\n                                return this.groupBundle(<IJspmTaskContext>ctx, builder, name, bundle, gulp)\r\n                                    .then(trans => this.translate(trans));\r\n                            });\r\n                    }))\r\n                }).then(groups => {\r\n                    return _.flatten(groups);\r\n                });\r\n        } else {\r\n            return this.loadBuilder(ctx)\r\n                .then(builder => {\r\n                    let src = ctx.getSrc(this.getInfo());\r\n                    console.log('start bundle all src : ', chalk.cyan(<any>src));\r\n                    if (option.builder.config) {\r\n                        builder.config(option.builder.config)\r\n                    }\r\n\r\n                    return ctx.fileFilter(src)\r\n                        .then(files => {\r\n                            files = this.getRelativeSrc(ctx, files, <IJspmTaskContext>ctx);\r\n                            console.log('bundle files:', chalk.cyan(<any>files));\r\n                            let mainfile = this.getBundleManifestPath(<IJspmTaskContext>ctx);\r\n                            return this.createBundler(<IJspmTaskContext>ctx, builder, 'bundle', files.join(' + '), mainfile, option.builder)\r\n                                .then(trans => this.translate(trans));\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    private getRelativeSrc(ctx: ITaskContext, src: Src, config: IJspmTaskContext, toModule = false): string[] {\r\n        // console.log(option.baseURL);\r\n        let baseURL = <string>config.option.bundleBaseURL;\r\n        if (_.isArray(src)) {\r\n            return _.map(src, s => {\r\n                let filename = path.relative(baseURL, s).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n                return toModule ? this.toModulePath(filename) : filename;\r\n            });\r\n        } else {\r\n            let fn = path.relative(baseURL, src).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n            return [(toModule ? this.toModulePath(fn) : fn)];\r\n        }\r\n    }\r\n\r\n    private toModulePath(filename: string): string {\r\n        if (!filename) {\r\n            return '';\r\n        }\r\n        return filename.substring(0, filename.length - path.extname(filename).length);\r\n    }\r\n\r\n    private initOption(ctx: ITaskContext) {\r\n        let self = this;\r\n        let option = <IBundlesConfig>_.extend(<IBundlesConfig>{\r\n            baseURL: '',\r\n            bundleBaseURL: '.',\r\n            mainfile: 'bundle.js',\r\n            jspmConfig: '',\r\n            packageFile: 'package.json',\r\n            dest: '',\r\n            file: '',\r\n            systemConfigTempl: '',\r\n            relationToRoot: '',\r\n            bust: '',\r\n            bundles: null,\r\n            bundlePaths(ctx) {\r\n                let paths: any = {};\r\n                let bundleDest = ctx.getDist();\r\n                let rootpath = <string>ctx.option.bundleBaseURL;\r\n                let dir = readdirSync(rootpath);\r\n                _.each(dir, (d: string) => {\r\n\r\n                    let sf = path.join(rootpath, d);\r\n                    if (sf === bundleDest) {\r\n                        return;\r\n                    }\r\n                    let f = lstatSync(sf);\r\n                    if (f.isDirectory()) {\r\n                        let p = d + '/*';\r\n                        paths[p] = path.relative(ctx.env.root, path.join(rootpath, p)).replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n                    }\r\n                });\r\n                let jpk = <string>option.jspmPackages;\r\n                let jp = path.basename(jpk) + '/*';\r\n                paths[jp] =  path.relative(ctx.env.root, path.join(jpk, jp)).replace(/\\\\/g, '/').replace(/^\\//g, '')\r\n                return paths;\r\n            },\r\n            includePackageFiles: [\r\n                'system-polyfills.src.js',\r\n                'system.src.js'\r\n            ],\r\n            jspmMates: {\r\n                '*.css': {\r\n                    loader: 'css'\r\n                },\r\n                '*.json': {\r\n                    loader: 'json'\r\n                },\r\n                '*.jsx': {\r\n                    loader: 'jsx'\r\n                }\r\n            },\r\n            builder: {\r\n                sfx: false,\r\n                minify: false,\r\n                mangle: false,\r\n                sourceMaps: false,\r\n                separateCSS: false,\r\n                lowResSourceMaps: true\r\n            }\r\n        }, <IBundlesConfig>ctx.option);\r\n\r\n        ctx.option = option;\r\n\r\n        option.baseURL = ctx.toRootPath(ctx.toStr(option.baseURL));\r\n        option.bundleBaseURL = ctx.toRootPath(ctx.toStr(option.bundleBaseURL));\r\n        if (option.jspmConfig) {\r\n            option.jspmConfig = ctx.toRootPath(ctx.toStr(option.jspmConfig));\r\n        }\r\n        option.packageFile = ctx.toRootPath(ctx.toStr(option.packageFile));\r\n        option.mainfile = ctx.toStr(option.mainfile);\r\n        let pkg = this.getPackage(option);\r\n        if (!option.jspmPackages) {\r\n            if (pkg.jspm.directories && pkg.jspm.directories.packages) {\r\n                option.jspmPackages = <string>pkg.jspm.directories.packages;\r\n            } else {\r\n                option.jspmPackages = 'jspm_packages';\r\n            }\r\n        }\r\n        option.jspmPackages = ctx.toRootPath(ctx.toStr(option.jspmPackages));\r\n\r\n        if (!readdirSync(option.jspmPackages)) {\r\n            console.log(chalk.red('jspm project config error!'));\r\n            process.exit(0);\r\n        }\r\n\r\n        option.builder.config = _.extend(option.builder.config || {}, {\r\n            paths: _.isFunction(option.bundlePaths) ? option.bundlePaths(<IJspmTaskContext>ctx) : (option.bundlePaths || {}),\r\n            rootURL: option.bundleBaseURL\r\n        });\r\n\r\n        return option;\r\n    }\r\n\r\n\r\n    execute(context: ITaskContext, gulp: Gulp) {\r\n        this.bundleMaps = [];\r\n        let ctx = <IJspmTaskContext>context;\r\n        return super.execute(ctx, gulp)\r\n            .then(() => {\r\n                let option = <IBundlesConfig>ctx.option;\r\n                if (option.bundles) {\r\n                    return this.calcChecksums(option, this.bundleMaps).then((checksums) => {\r\n                        return this.updateBundleManifest(ctx, this.bundleMaps, checksums);\r\n                    });\r\n                } else {\r\n                    return null;\r\n                }\r\n            }).then(manifest => {\r\n                if (manifest) {\r\n                    return this.writeBundleManifest(ctx, manifest, gulp)\r\n                        .then(() => {\r\n                            console.log(chalk.green('------ Complete -------------'));\r\n                        });\r\n                } else {\r\n                    console.log(chalk.green('------ Complete -------------'));\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp: Gulp) {\r\n        ctx.option = this.initOption(ctx);\r\n        return super.setup(ctx, gulp);\r\n    }\r\n\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        let bundle = <IBundleMap>source['bundle'];\r\n        return super.working(source, ctx, option, gulp, pipes, output)\r\n            .then(() => {\r\n                let bundlemap: IBundleMap = {\r\n                    path: bundle.path,\r\n                    modules: bundle.modules\r\n                };\r\n                this.bundleMaps.push(bundlemap);\r\n                if (bundle.sfx) {\r\n                    console.log(`Built sfx package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                } else {\r\n                    console.log(`Bundled package: ${chalk.cyan(bundle.bundleName)} -> ${chalk.cyan(bundle.filename)}\\n   dest: ${chalk.cyan(bundle.bundleDest)}`);\r\n                }\r\n                return;\r\n            });\r\n    }\r\n\r\n    getBundles(ctx: ITaskContext) {\r\n\r\n        let groups = [];\r\n        if (ctx.env.gb) {\r\n            groups = _.uniq(_.isArray(ctx.env.gb) ? ctx.env.gb : (ctx.env.gb || '').split(','));\r\n        }\r\n\r\n        if (groups.length < 1) {\r\n            groups = _.keys(this.bundleConfig);\r\n        } else {\r\n            groups = _.filter(groups, f => f && groups[f]);\r\n        }\r\n        console.log('cmmand group bundle:', chalk.cyan(<any>groups));\r\n        return groups;\r\n    }\r\n\r\n    protected groupBundle(config: IJspmTaskContext, builder, name: string, bundleGp: IBundleGroup, gulp: Gulp): Promise<IBundleTransform | IBundleTransform[]> {\r\n\r\n        let bundleStr = '';\r\n        let bundleDest = '';\r\n\r\n        let bundleItems: string[] = [];\r\n        let minusStr = this.exclusionString(bundleGp.exclude, this.bundleConfig);\r\n\r\n        if (bundleGp.items) {\r\n            bundleItems = _.isArray(bundleItems) ? <string[]>bundleGp.items : _.keys(bundleGp.items);\r\n        }\r\n\r\n        if (bundleGp.combine) {\r\n            bundleDest = this.getBundleDest(config, name, bundleGp);\r\n            bundleStr = bundleItems.join(' + ') + minusStr;\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup source:\\n  ${chalk.cyan(bundleStr)}\\n-------------------------------`);\r\n            return this.createBundler(config, builder, name, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n\r\n        } else {\r\n            console.log(`Bundling group: ${chalk.cyan(name)} ... \\ngroup items:\\n  ${chalk.cyan(<any>bundleItems)}\\n-------------------------------`);\r\n            return Promise.all(bundleItems.map(key => {\r\n                bundleStr = key + minusStr;\r\n                bundleDest = this.getBundleDest(config, key, bundleGp);\r\n                return this.createBundler(config, builder, key, bundleStr, bundleDest, bundleGp.builder, bundleGp);\r\n            }));\r\n        }\r\n    }\r\n\r\n    private exclusionString(exclude, groups): string {\r\n        let str = this.exclusionArray(exclude, groups).join(' - ');\r\n        return (str) ? ' - ' + str : '';\r\n    }\r\n\r\n    private exclusionArray(exclude, groups): string[] {\r\n        let minus: string[] = [];\r\n        exclude = (_.isArray(exclude)) ? exclude : _.keys(exclude);\r\n        _.forEach(exclude, (item: string) => {\r\n            var group = groups[item];\r\n            if (group) {\r\n                // exclude everything from this group\r\n                minus = minus.concat(this.exclusionArray(group.items, groups));\r\n            } else {\r\n                // exclude this item by name\r\n                minus.push(item);\r\n            }\r\n        });\r\n        return minus;\r\n    }\r\n\r\n    private createBundler(config: IJspmTaskContext, builder: any, bundleName: string, bundleStr: string, bundleDest: string, builderCfg: IBuidlerConfig, bundleGp?: IBundleGroup): Promise<IBundleTransform> {\r\n\r\n        let sfx = builderCfg.sfx;\r\n        let bundler = (sfx) ? builder.buildStatic : builder.bundle;\r\n        let shortPath = this.getBundleShortPath(config, bundleName, bundleGp);\r\n        let filename = path.parse(bundleDest).base;\r\n\r\n        return bundler.bind(builder)(bundleStr, bundleDest, builderCfg)\r\n            .then(output => {\r\n                mkdirp.sync(path.dirname(bundleDest));\r\n                var stream: ITransform = source(filename);\r\n                stream.write(output.source);\r\n                process.nextTick(function () {\r\n                    stream.end();\r\n                });\r\n\r\n                return {\r\n                    stream: stream.pipe(vinylBuffer()),\r\n                    bundle: {\r\n                        path: shortPath,\r\n                        sfx: sfx,\r\n                        bundleName: bundleName,\r\n                        filename: filename,\r\n                        bundleDest: bundleDest,\r\n                        modules: output.modules\r\n                    }\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    private packages = {};\r\n    public getPackage(option: IBundlesConfig): any {\r\n        if (!this.packages[<string>option.packageFile]) {\r\n            this.packages[<string>option.packageFile] = require(<string>option.packageFile);\r\n        }\r\n        return this.packages[<string>option.packageFile]\r\n    }\r\n\r\n    private calcChecksums(option: IBundlesConfig, bundles: any[]): Promise<any> {\r\n        let chksums = {};\r\n\r\n        console.log('Calculating checksums...');\r\n\r\n        return Promise.all(_.map(bundles, (bundle: any) => {\r\n            if (!_.isObject(bundle)) {\r\n                return null;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                let filepath = path.join(<string>option.bundleBaseURL || '.', bundle.path);\r\n                let filename = path.parse(bundle.path).base;\r\n                chksum.file(filepath, (err, sum) => {\r\n                    if (err) {\r\n                        console.error(chalk.red(' Checksum Error:'), chalk.red(err));\r\n                    }\r\n                    console.log(filename, chalk.cyan(sum));\r\n                    chksums[bundle.path] = sum;\r\n                    resolve(chksums);\r\n                });\r\n            });\r\n\r\n        })).then(() => {\r\n            return chksums;\r\n        });\r\n    }\r\n\r\n    protected updateBundleManifest(ctx: IJspmTaskContext, bundles: any[], chksums?: any) {\r\n\r\n        chksums = chksums || {};\r\n\r\n        var manifest: any = _.defaults(this.getBundleManifest(ctx), {\r\n            bundles: {},\r\n            chksums: {}\r\n        });\r\n\r\n        // console.log(manifest);\r\n\r\n        _.each(bundles, bundle => {\r\n            if (bundle.path) {\r\n                manifest.bundles[bundle.path] = bundle.modules;\r\n                manifest.chksums[bundle.path] = chksums[bundle.path] || '';\r\n            }\r\n        });\r\n\r\n        return manifest;\r\n\r\n    }\r\n\r\n    private manifestSplit = `/*------bundles infos------*/`;\r\n    private writeBundleManifest(ctx: IJspmTaskContext, manifest, gulp: Gulp): Promise<any> {\r\n        let option = ctx.option;\r\n        if (!option.mainfile) {\r\n            return Promise.reject('mainfile not configed.');\r\n        }\r\n\r\n\r\n        console.log('Writing manifest...');\r\n\r\n\r\n        let output = `\r\nSystem.config({\r\n    baseURL: '${ path.relative(<string>option.baseURL, ctx.env.root) || '.'}',\r\n    defaultJSExtensions: true\r\n});\r\nSystem.bundled = true;\r\nSystem.bust = '${option.bust}';\r\nif(window != undefined) window.prod = true;\r\n${this.manifestSplit}\r\n`;\r\n        let template = '';\r\n\r\n        if (manifest) {\r\n            // try {\r\n            template = ctx.toStr(option.systemConfigTempl);\r\n\r\n            if (!template) {\r\n                template = (option.bust) ? `\r\n(function(module) {\r\n    var bust = {};\r\n    var systemLocate = System.locate;\r\n    var systemNormalize = System.normalize;\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var chksums = module.exports.chksums = \\${chksums};\r\n    var bundles = module.exports.bundles = \\${bundles};                    \r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n    System.normalize = function (name, pName, pAddress) {\r\n        return systemNormalize.call(this, name, pName, pAddress).then(function (address) {\r\n            var chksum = chksums[name];\r\n            if (chksums[name]) { bust[address] = chksum; }\r\n            return address;\r\n        });\r\n    };\r\n\r\n    System.locate = function (load) {\r\n        return Promise.resolve(systemLocate.call(this, load)).then(function (address) {\r\n            var chksum = bust[address];\r\n            return (chksum) ? address + '?' + chksum : address;\r\n        });\r\n    };\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n` : `\r\n(function(module) {\r\n    var bundles = module.exports.bundles = \\${bundles};\r\n    var paths =  module.exports.paths = \\${paths} || {};\r\n    var maps = \\${ maps };\r\n    var jspmMeta = \\${ jspmMeta };\r\n\r\n    System.config({\r\n            packages: {\r\n            \"meta\": jspmMeta\r\n        },\r\n        map: maps,\r\n        paths: paths,\r\n        bundles: bundles\r\n    });\r\n\r\n})((typeof module !== 'undefined') ? module : {exports: {}}, this);\r\n`;\r\n            }\r\n\r\n\r\n            let maps = {\r\n                css: 'github:systemjs/plugin-css@0.1.20.js',\r\n                json: 'github:systemjs/plugin-json@0.1.2.js'\r\n            };\r\n\r\n            _.each(_.keys(manifest.bundles), n => {\r\n                if (/css.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n                if (/json.min.js$/.test(n)) {\r\n                    maps.css = <string>_.first(manifest.bundles[n]);\r\n                }\r\n            });\r\n\r\n            let jspmMetas = option.jspmMates;\r\n            output += _.template(template)({\r\n                maps: JSON.stringify(maps, null, '    '),\r\n                jspmMeta: JSON.stringify(jspmMetas, null, '    '),\r\n                paths: JSON.stringify(ctx.option.builder.config ? ctx.option.builder.config.paths : null, null, '    '),\r\n                chksums: JSON.stringify(manifest.chksums, null, '    '),\r\n                bundles: JSON.stringify(manifest.bundles, null, '    '),\r\n            });\r\n\r\n        }\r\n\r\n\r\n        let includes = option.includes || [];\r\n\r\n        includes = includes.concat(_.map(option.includePackageFiles, f => path.join(option.jspmPackages, f)));\r\n\r\n        return Promise.all(_.map(includes, f => {\r\n            return new Promise<string>((resolve, reject) => {\r\n                readFile(path.join(option.jspmConfig, f), 'utf8', (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            });\r\n        }))\r\n            .then(data => {\r\n                data.push(output);\r\n                let mainfile = ctx.toStr(option.mainfile); // path.relative(this.getBundleManifestPath(ctx), ctx.getDist(this.getInfo()));\r\n                console.log('mainfile:', mainfile);\r\n                mkdirp.sync(path.dirname(mainfile));\r\n                var stream = <NodeJS.ReadWriteStream>source(mainfile);\r\n                stream.write(data.join('\\n'));\r\n                process.nextTick(() => {\r\n                    stream.end();\r\n                });\r\n\r\n                return super.working(stream.pipe(vinylBuffer()), ctx, option, gulp, option.mainfilePipes || [], option.mainfileOutput);\r\n            });\r\n\r\n    }\r\n\r\n    private getBundleManifestPath(ctx: IJspmTaskContext): string {\r\n        return this.getBundleDest(ctx, <string>ctx.option.mainfile);\r\n    }\r\n    private getBundleManifest(ctx: IJspmTaskContext): any {\r\n        let data: any = {};\r\n        let mainfile: string = this.getBundleManifestPath(ctx);\r\n        console.log('try to load old bundle in path ', mainfile);\r\n        if (existsSync(mainfile)) {\r\n            try {\r\n                let content = readFileSync(mainfile, 'utf8');\r\n                let idx = content.indexOf(this.manifestSplit);\r\n                idx = idx > 0 ? (idx + this.manifestSplit.length) : 0;\r\n                content = content.substring(idx);\r\n                // console.log(content);\r\n                writeFileSync(mainfile, content);\r\n                data = require(mainfile);\r\n                console.log('has old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n            } catch (e) {\r\n                console.log(chalk.red(e));\r\n            }\r\n        } else {\r\n            console.log('no old bundle：\\n', chalk.cyan(mainfile)); // , 'data:\\n', data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private getBundleShortPath(ctx: IJspmTaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n        var fullPath = bundleGp ? this.getBundleDest(ctx, bundleName, bundleGp)\r\n            : path.join(ctx.getDist(), bundleName);\r\n\r\n        let spath: string = path.relative(<string>ctx.option.bundleBaseURL, fullPath);\r\n        spath = spath.replace(/\\\\/g, '/').replace(/^\\//g, '');\r\n        return spath;\r\n    }\r\n\r\n    private getBundleDest(ctx: IJspmTaskContext, bundleName: string, bundleGp?: IBundleGroup) {\r\n\r\n        let dest = ctx.getDist();\r\n        if (bundleGp) {\r\n            let min = bundleGp.builder.minify;\r\n            let name = bundleGp.items[bundleName] || bundleName;\r\n            let file = name + ((min) ? '.min.js' : '.js');\r\n\r\n            if (bundleGp.combine) {\r\n                dest = path.join(dest, file);\r\n            } else {\r\n                dest = path.join(dest, bundleName, file);\r\n            }\r\n        } else {\r\n            dest = path.join(dest, bundleName);\r\n        }\r\n\r\n        return dest;\r\n    }\r\n}\r\n"]}